// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.api.generator.gapic.composer;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;

import com.google.api.generator.engine.writer.JavaWriterVisitor;
import com.google.api.generator.gapic.model.GapicBatchingSettings;
import com.google.api.generator.gapic.model.GapicClass;
import com.google.api.generator.gapic.model.GapicServiceConfig;
import com.google.api.generator.gapic.model.Message;
import com.google.api.generator.gapic.model.ResourceName;
import com.google.api.generator.gapic.model.Service;
import com.google.api.generator.gapic.protoparser.BatchingSettingsConfigParser;
import com.google.api.generator.gapic.protoparser.Parser;
import com.google.api.generator.gapic.protoparser.ServiceConfigParser;
import com.google.logging.v2.LogEntryProto;
import com.google.logging.v2.LoggingConfigProto;
import com.google.logging.v2.LoggingMetricsProto;
import com.google.logging.v2.LoggingProto;
import com.google.protobuf.Descriptors.FileDescriptor;
import com.google.protobuf.Descriptors.ServiceDescriptor;
import com.google.pubsub.v1.PubsubProto;
import com.google.showcase.v1beta1.EchoOuterClass;
import google.cloud.CommonResources;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import org.junit.Test;

public class ServiceStubSettingsClassComposerTest {
  private static final String TESTFILES_DIRECTORY =
      "src/test/java/com/google/api/generator/gapic/testdata/";

  @Test
  public void generateServiceStubSettingsClasses_batchingWithEmptyResponses() {
    FileDescriptor serviceFileDescriptor = LoggingProto.getDescriptor();
    ServiceDescriptor serviceDescriptor = serviceFileDescriptor.getServices().get(0);
    assertEquals(serviceDescriptor.getName(), "LoggingServiceV2");

    List<FileDescriptor> protoFiles =
        Arrays.asList(
            serviceFileDescriptor,
            LogEntryProto.getDescriptor(),
            LoggingConfigProto.getDescriptor(),
            LoggingMetricsProto.getDescriptor());

    Map<String, ResourceName> resourceNames = new HashMap<>();
    Map<String, Message> messageTypes = new HashMap<>();
    for (FileDescriptor fileDescriptor : protoFiles) {
      resourceNames.putAll(Parser.parseResourceNames(fileDescriptor));
      messageTypes.putAll(Parser.parseMessages(fileDescriptor));
    }

    List<Service> services =
        parseServices(serviceFileDescriptor, serviceDescriptor, messageTypes, resourceNames);

    String filename = "logging_gapic.yaml";
    Path path = Paths.get(TESTFILES_DIRECTORY, filename);
    Optional<List<GapicBatchingSettings>> batchingSettingsOpt =
        BatchingSettingsConfigParser.parse(Optional.of(path.toString()));
    assertTrue(batchingSettingsOpt.isPresent());

    String jsonFilename = "logging_grpc_service_config.json";
    Path jsonPath = Paths.get(TESTFILES_DIRECTORY, jsonFilename);
    Optional<GapicServiceConfig> configOpt =
        ServiceConfigParser.parse(jsonPath.toString(), batchingSettingsOpt);
    assertTrue(configOpt.isPresent());
    GapicServiceConfig config = configOpt.get();

    Service protoService = services.get(0);
    GapicClass clazz =
        ServiceStubSettingsClassComposer.instance().generate(protoService, config, messageTypes);

    JavaWriterVisitor visitor = new JavaWriterVisitor();
    clazz.classDefinition().accept(visitor);
    assertEquals(EXPECTED_LOGGING_STUB_SETTINGS_STRING, visitor.write());
  }

  @Test
  public void generateServiceStubSettingsClasses_batchingWithNonemptyResponses() {
    FileDescriptor serviceFileDescriptor = PubsubProto.getDescriptor();
    FileDescriptor commonResourcesFileDescriptor = CommonResources.getDescriptor();
    ServiceDescriptor serviceDescriptor = serviceFileDescriptor.getServices().get(0);
    assertEquals("Publisher", serviceDescriptor.getName());

    Map<String, ResourceName> resourceNames = new HashMap<>();
    resourceNames.putAll(Parser.parseResourceNames(serviceFileDescriptor));
    resourceNames.putAll(Parser.parseResourceNames(commonResourcesFileDescriptor));

    Map<String, Message> messageTypes = Parser.parseMessages(serviceFileDescriptor);

    List<Service> services =
        parseServices(serviceFileDescriptor, serviceDescriptor, messageTypes, resourceNames);

    String filename = "pubsub_gapic.yaml";
    Path path = Paths.get(TESTFILES_DIRECTORY, filename);
    Optional<List<GapicBatchingSettings>> batchingSettingsOpt =
        BatchingSettingsConfigParser.parse(Optional.of(path.toString()));
    assertTrue(batchingSettingsOpt.isPresent());

    String jsonFilename = "pubsub_grpc_service_config.json";
    Path jsonPath = Paths.get(TESTFILES_DIRECTORY, jsonFilename);
    Optional<GapicServiceConfig> configOpt =
        ServiceConfigParser.parse(jsonPath.toString(), batchingSettingsOpt);
    assertTrue(configOpt.isPresent());
    GapicServiceConfig config = configOpt.get();

    Service protoService = services.get(0);
    assertEquals("Publisher", protoService.name());
    GapicClass clazz =
        ServiceStubSettingsClassComposer.instance().generate(protoService, config, messageTypes);

    JavaWriterVisitor visitor = new JavaWriterVisitor();
    clazz.classDefinition().accept(visitor);
    assertEquals(EXPECTED_PUBLISHER_STUB_SETTINGS_STRING, visitor.write());
  }

  @Test
  public void generateServiceStubSettingsClasses_basic() {
    FileDescriptor echoFileDescriptor = EchoOuterClass.getDescriptor();
    ServiceDescriptor echoServiceDescriptor = echoFileDescriptor.getServices().get(0);
    assertEquals(echoServiceDescriptor.getName(), "Echo");

    Map<String, Message> messageTypes = Parser.parseMessages(echoFileDescriptor);
    Map<String, ResourceName> resourceNames = Parser.parseResourceNames(echoFileDescriptor);
    List<Service> services =
        parseServices(echoFileDescriptor, echoServiceDescriptor, messageTypes, resourceNames);

    String jsonFilename = "showcase_grpc_service_config.json";
    Path jsonPath = Paths.get(TESTFILES_DIRECTORY, jsonFilename);
    Optional<GapicServiceConfig> configOpt =
        ServiceConfigParser.parse(jsonPath.toString(), Optional.empty());
    assertTrue(configOpt.isPresent());
    GapicServiceConfig config = configOpt.get();

    Service echoProtoService = services.get(0);
    GapicClass clazz =
        ServiceStubSettingsClassComposer.instance()
            .generate(echoProtoService, config, messageTypes);

    JavaWriterVisitor visitor = new JavaWriterVisitor();
    clazz.classDefinition().accept(visitor);
    assertEquals(EXPECTED_ECHO_STUB_SETTINGS_STRING, visitor.write());
  }

  private static List<Service> parseServices(
      FileDescriptor protoFileDescriptor,
      ServiceDescriptor serviceDescriptor,
      Map<String, Message> messageTypes,
      Map<String, ResourceName> resourceNames) {
    Set<ResourceName> outputResourceNames = new HashSet<>();
    return Parser.parseService(
        protoFileDescriptor, messageTypes, resourceNames, outputResourceNames);
  }

  // TODO(miraleung): Update this when a file-diffing test mechanism is in place.
  private static final String EXPECTED_ECHO_STUB_SETTINGS_STRING =
      "package com.google.showcase.v1beta1.stub;\n"
          + "\n"
          + "import static com.google.showcase.v1beta1.EchoClient.PagedExpandPagedResponse;\n"
          + "\n"
          + "import com.google.api.core.ApiFunction;\n"
          + "import com.google.api.core.ApiFuture;\n"
          + "import com.google.api.core.BetaApi;\n"
          + "import com.google.api.gax.core.GaxProperties;\n"
          + "import com.google.api.gax.core.GoogleCredentialsProvider;\n"
          + "import com.google.api.gax.core.InstantiatingExecutorProvider;\n"
          + "import com.google.api.gax.grpc.GaxGrpcProperties;\n"
          + "import com.google.api.gax.grpc.GrpcTransportChannel;\n"
          + "import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n"
          + "import com.google.api.gax.grpc.ProtoOperationTransformers;\n"
          + "import com.google.api.gax.longrunning.OperationSnapshot;\n"
          + "import com.google.api.gax.longrunning.OperationTimedPollAlgorithm;\n"
          + "import com.google.api.gax.retrying.RetrySettings;\n"
          + "import com.google.api.gax.rpc.ApiCallContext;\n"
          + "import com.google.api.gax.rpc.ApiClientHeaderProvider;\n"
          + "import com.google.api.gax.rpc.ClientContext;\n"
          + "import com.google.api.gax.rpc.OperationCallSettings;\n"
          + "import com.google.api.gax.rpc.PageContext;\n"
          + "import com.google.api.gax.rpc.PagedCallSettings;\n"
          + "import com.google.api.gax.rpc.PagedListDescriptor;\n"
          + "import com.google.api.gax.rpc.PagedListResponseFactory;\n"
          + "import com.google.api.gax.rpc.ServerStreamingCallSettings;\n"
          + "import com.google.api.gax.rpc.StatusCode;\n"
          + "import com.google.api.gax.rpc.StreamingCallSettings;\n"
          + "import com.google.api.gax.rpc.StubSettings;\n"
          + "import com.google.api.gax.rpc.TransportChannelProvider;\n"
          + "import com.google.api.gax.rpc.UnaryCallSettings;\n"
          + "import com.google.api.gax.rpc.UnaryCallable;\n"
          + "import com.google.common.collect.ImmutableList;\n"
          + "import com.google.common.collect.ImmutableMap;\n"
          + "import com.google.common.collect.ImmutableSet;\n"
          + "import com.google.common.collect.Lists;\n"
          + "import com.google.longrunning.Operation;\n"
          + "import com.google.showcase.v1beta1.BlockRequest;\n"
          + "import com.google.showcase.v1beta1.BlockResponse;\n"
          + "import com.google.showcase.v1beta1.EchoRequest;\n"
          + "import com.google.showcase.v1beta1.EchoResponse;\n"
          + "import com.google.showcase.v1beta1.ExpandRequest;\n"
          + "import com.google.showcase.v1beta1.PagedExpandRequest;\n"
          + "import com.google.showcase.v1beta1.PagedExpandResponse;\n"
          + "import com.google.showcase.v1beta1.WaitMetadata;\n"
          + "import com.google.showcase.v1beta1.WaitRequest;\n"
          + "import com.google.showcase.v1beta1.WaitResponse;\n"
          + "import java.io.IOException;\n"
          + "import java.util.List;\n"
          + "import java.util.Objects;\n"
          + "import javax.annotation.Generated;\n"
          + "import org.threeten.bp.Duration;\n"
          + "\n"
          + "// AUTO-GENERATED DOCUMENTATION AND CLASS.\n"
          + "/**\n"
          + " * Settings class to configure an instance of {@link EchoStubSettings}.\n"
          + " *\n"
          + " * <p>The default instance has everything set to sensible defaults:\n"
          + " *\n"
          + " * <ul>\n"
          + " *   <li>The default service address (localhost) and default port (7469) are used.\n"
          + " *   <li>Credentials are acquired automatically through Application Default"
          + " Credentials.\n"
          + " *   <li>Retries are configured for idempotent methods but not for non-idempotent"
          + " methods.\n"
          + " * </ul>\n"
          + " *\n"
          + " * <p>The builder of this class is recursive, so contained classes are themselves"
          + " builders. When\n"
          + " * build() is called, the tree of builders is called to create the complete settings"
          + " object.\n"
          + " *\n"
          + " * <p>For example, to set the total timeout of echo to 30 seconds:\n"
          + " */\n"
          + "@BetaApi\n"
          + "@Generated(\"by gapic-generator-java\")\n"
          + "public class EchoStubSettings extends StubSettings<EchoStubSettings> {\n"
          + "  /** The default scopes of the service. */\n"
          + "  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES =\n"
          + "     "
          + " ImmutableList.<String>builder().add(\"https://www.googleapis.com/auth/cloud-platform\").build();\n"
          + "\n"
          + "  private final UnaryCallSettings<EchoRequest, EchoResponse> echoSettings;\n"
          + "  private final ServerStreamingCallSettings<ExpandRequest, EchoResponse>"
          + " expandSettings;\n"
          + "  private final StreamingCallSettings<EchoRequest, EchoResponse> collectSettings;\n"
          + "  private final StreamingCallSettings<EchoRequest, EchoResponse> chatSettings;\n"
          + "  private final StreamingCallSettings<EchoRequest, EchoResponse> chatAgainSettings;\n"
          + "  private final PagedCallSettings<PagedExpandRequest, PagedExpandResponse,"
          + " PagedExpandPagedResponse>\n"
          + "      pagedExpandSettings;\n"
          + "  private final UnaryCallSettings<WaitRequest, Operation> waitSettings;\n"
          + "  private final OperationCallSettings<WaitRequest, WaitResponse, WaitMetadata>\n"
          + "      waitOperationSettings;\n"
          + "  private final UnaryCallSettings<BlockRequest, BlockResponse> blockSettings;\n"
          + "  private static final PagedListDescriptor<PagedExpandRequest, PagedExpandResponse,"
          + " EchoResponse>\n"
          + "      PAGED_EXPAND_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<PagedExpandRequest, PagedExpandResponse,"
          + " EchoResponse>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public PagedExpandRequest injectToken(PagedExpandRequest payload, String"
          + " token) {\n"
          + "              return"
          + " PagedExpandRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public PagedExpandRequest injectPageSize(PagedExpandRequest payload, int"
          + " pageSize) {\n"
          + "              return"
          + " PagedExpandRequest.newBuilder(payload).setPageSize(pageSize).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(PagedExpandRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(PagedExpandResponse payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<EchoResponse> extractResources(PagedExpandResponse"
          + " payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<EchoResponse>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          PagedExpandRequest, PagedExpandResponse, PagedExpandPagedResponse>\n"
          + "      PAGED_EXPAND_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              PagedExpandRequest, PagedExpandResponse, PagedExpandPagedResponse>()"
          + " {\n"
          + "            @Override\n"
          + "            public ApiFuture<PagedExpandPagedResponse> getFuturePagedResponse(\n"
          + "                UnaryCallable<PagedExpandRequest, PagedExpandResponse> callable,\n"
          + "                PagedExpandRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<PagedExpandResponse> futureResponse) {\n"
          + "              PageContext<PagedExpandRequest, PagedExpandResponse, EchoResponse>"
          + " pageContext =\n"
          + "                  PageContext.create(callable, PAGED_EXPAND_PAGE_STR_DESC, request,"
          + " context);\n"
          + "              return PagedExpandPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to echo. */\n"
          + "  public UnaryCallSettings<EchoRequest, EchoResponse> echoSettings() {\n"
          + "    return echoSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to expand. */\n"
          + "  public ServerStreamingCallSettings<ExpandRequest, EchoResponse> expandSettings()"
          + " {\n"
          + "    return expandSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to collect. */\n"
          + "  public StreamingCallSettings<EchoRequest, EchoResponse> collectSettings() {\n"
          + "    return collectSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to chat. */\n"
          + "  public StreamingCallSettings<EchoRequest, EchoResponse> chatSettings() {\n"
          + "    return chatSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to chatAgain. */\n"
          + "  public StreamingCallSettings<EchoRequest, EchoResponse> chatAgainSettings() {\n"
          + "    return chatAgainSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to pagedExpand. */\n"
          + "  public PagedCallSettings<PagedExpandRequest, PagedExpandResponse,"
          + " PagedExpandPagedResponse>\n"
          + "      pagedExpandSettings() {\n"
          + "    return pagedExpandSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to wait. */\n"
          + "  public UnaryCallSettings<WaitRequest, Operation> waitSettings() {\n"
          + "    return waitSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to wait. */\n"
          + "  public OperationCallSettings<WaitRequest, WaitResponse, WaitMetadata>"
          + " waitOperationSettings() {\n"
          + "    return waitOperationSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to block. */\n"
          + "  public UnaryCallSettings<BlockRequest, BlockResponse> blockSettings() {\n"
          + "    return blockSettings;\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  public EchoStub createStub() throws IOException {\n"
          + "    if (getTransportChannelProvider()\n"
          + "        .getTransportName()\n"
          + "        .equals(GrpcTransportChannel.getGrpcTransportName())) {\n"
          + "      return GrpcEchoStub.create(this);\n"
          + "    }\n"
          + "    throw new UnsupportedOperationException(\n"
          + "        String.format(\n"
          + "            \"Transport not supported: %s\","
          + " getTransportChannelProvider().getTransportName()));\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ExecutorProvider for this service. */\n"
          + "  public static InstantiatingExecutorProvider.Builder"
          + " defaultExecutorProviderBuilder() {\n"
          + "    return InstantiatingExecutorProvider.newBuilder();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service endpoint. */\n"
          + "  public static String getDefaultEndpoint() {\n"
          + "    return \"localhost:7469\";\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service scopes. */\n"
          + "  public static List<String> getDefaultServiceScopes() {\n"
          + "    return DEFAULT_SERVICE_SCOPES;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default credentials for this service. */\n"
          + "  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder()"
          + " {\n"
          + "    return"
          + " GoogleCredentialsProvider.newBuilder().setScopesToApply(DEFAULT_SERVICE_SCOPES);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ChannelProvider for this service. */\n"
          + "  public static InstantiatingGrpcChannelProvider.Builder"
          + " defaultGrpcTransportProviderBuilder() {\n"
          + "    return InstantiatingGrpcChannelProvider.newBuilder()\n"
          + "        .setMaxInboundMessageSize(Integer.MAX_VALUE);\n"
          + "  }\n"
          + "\n"
          + "  public static TransportChannelProvider defaultTransportChannelProvider() {\n"
          + "    return defaultGrpcTransportProviderBuilder().build();\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"The surface for customizing headers is not stable yet and may change in"
          + " the future.\")\n"
          + "  public static ApiClientHeaderProvider.Builder"
          + " defaultApiClientHeaderProviderBuilder() {\n"
          + "    return ApiClientHeaderProvider.newBuilder()\n"
          + "        .setGeneratedLibToken(\"gapic\","
          + " GaxProperties.getLibraryVersion(EchoStubSettings.class))\n"
          + "        .setTransportToken(\n"
          + "            GaxGrpcProperties.getGrpcTokenName(),"
          + " GaxGrpcProperties.getGrpcVersion());\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder() {\n"
          + "    return Builder.createDefault();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder(ClientContext clientContext) {\n"
          + "    return new Builder(clientContext);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder containing all the values of this settings class. */\n"
          + "  public Builder toBuilder() {\n"
          + "    return new Builder(this);\n"
          + "  }\n"
          + "\n"
          + "  protected EchoStubSettings(Builder settingsBuilder) throws IOException {\n"
          + "    super(settingsBuilder);\n"
          + "    echoSettings = settingsBuilder.echoSettings().build();\n"
          + "    expandSettings = settingsBuilder.expandSettings().build();\n"
          + "    collectSettings = settingsBuilder.collectSettings().build();\n"
          + "    chatSettings = settingsBuilder.chatSettings().build();\n"
          + "    chatAgainSettings = settingsBuilder.chatAgainSettings().build();\n"
          + "    pagedExpandSettings = settingsBuilder.pagedExpandSettings().build();\n"
          + "    waitSettings = settingsBuilder.waitSettings().build();\n"
          + "    waitOperationSettings = settingsBuilder.waitOperationSettings().build();\n"
          + "    blockSettings = settingsBuilder.blockSettings().build();\n"
          + "  }\n"
          + "\n"
          + "  /** Builder for EchoStubSettings. */\n"
          + "  public static class Builder extends StubSettings.Builder<EchoStub, Builder> {\n"
          + "    private final ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders;\n"
          + "    private final UnaryCallSettings.Builder<EchoRequest, EchoResponse>"
          + " echoSettings;\n"
          + "    private final ServerStreamingCallSettings.Builder<ExpandRequest, EchoResponse>"
          + " expandSettings;\n"
          + "    private final StreamingCallSettings.Builder<EchoRequest, EchoResponse>"
          + " collectSettings;\n"
          + "    private final StreamingCallSettings.Builder<EchoRequest, EchoResponse>"
          + " chatSettings;\n"
          + "    private final StreamingCallSettings.Builder<EchoRequest, EchoResponse>"
          + " chatAgainSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            PagedExpandRequest, PagedExpandResponse, PagedExpandPagedResponse>\n"
          + "        pagedExpandSettings;\n"
          + "    private final UnaryCallSettings.Builder<WaitRequest, Operation> waitSettings;\n"
          + "    private final OperationCallSettings.Builder<WaitRequest, WaitResponse,"
          + " WaitMetadata>\n"
          + "        waitOperationSettings;\n"
          + "    private final UnaryCallSettings.Builder<BlockRequest, BlockResponse>"
          + " blockSettings;\n"
          + "    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>>\n"
          + "        RETRYABLE_CODE_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions =\n"
          + "          ImmutableMap.builder();\n"
          + "      definitions.put(\n"
          + "          \"retry_policy_1_codes\",\n"
          + "          ImmutableSet.copyOf(\n"
          + "              Lists.<StatusCode.Code>newArrayList(\n"
          + "                  StatusCode.Code.UNAVAILABLE, StatusCode.Code.UNKNOWN)));\n"
          + "      definitions.put(\n"
          + "          \"no_retry_0_codes\","
          + " ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));\n"
          + "      RETRYABLE_CODE_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    private static final ImmutableMap<String, RetrySettings>"
          + " RETRY_PARAM_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, RetrySettings> definitions ="
          + " ImmutableMap.builder();\n"
          + "      RetrySettings settings = null;\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRetryDelay(Duration.ofMillis(100L))\n"
          + "              .setRetryDelayMultiplier(2.0)\n"
          + "              .setMaxRetryDelay(Duration.ofMillis(3000L))\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(10000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(10000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(10000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"retry_policy_1_params\", settings);\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(5000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(5000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(5000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"no_retry_0_params\", settings);\n"
          + "      RETRY_PARAM_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    protected Builder() {\n"
          + "      this(((ClientContext) null));\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(ClientContext clientContext) {\n"
          + "      super(clientContext);\n"
          + "      echoSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      expandSettings = ServerStreamingCallSettings.newBuilder();\n"
          + "      collectSettings = StreamingCallSettings.newBuilder();\n"
          + "      chatSettings = StreamingCallSettings.newBuilder();\n"
          + "      chatAgainSettings = StreamingCallSettings.newBuilder();\n"
          + "      pagedExpandSettings ="
          + " PagedCallSettings.newBuilder(PAGED_EXPAND_PAGE_STR_FACT);\n"
          + "      waitSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      waitOperationSettings = OperationCallSettings.newBuilder();\n"
          + "      blockSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              echoSettings, pagedExpandSettings, waitSettings, blockSettings);\n"
          + "      initDefaults(this);\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(EchoStubSettings settings) {\n"
          + "      super(settings);\n"
          + "      echoSettings = settings.echoSettings.toBuilder();\n"
          + "      expandSettings = settings.expandSettings.toBuilder();\n"
          + "      collectSettings = settings.collectSettings.toBuilder();\n"
          + "      chatSettings = settings.chatSettings.toBuilder();\n"
          + "      chatAgainSettings = settings.chatAgainSettings.toBuilder();\n"
          + "      pagedExpandSettings = settings.pagedExpandSettings.toBuilder();\n"
          + "      waitSettings = settings.waitSettings.toBuilder();\n"
          + "      waitOperationSettings = settings.waitOperationSettings.toBuilder();\n"
          + "      blockSettings = settings.blockSettings.toBuilder();\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              echoSettings, pagedExpandSettings, waitSettings, blockSettings);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder createDefault() {\n"
          + "      Builder builder = new Builder(((ClientContext) null));\n"
          + "      builder.setTransportChannelProvider(defaultTransportChannelProvider());\n"
          + "      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());\n"
          + "     "
          + " builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());\n"
          + "      builder.setEndpoint(getDefaultEndpoint());\n"
          + "      return initDefaults(builder);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder initDefaults(Builder builder) {\n"
          + "      builder\n"
          + "          .echoSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .expandSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .pagedExpandSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .waitSettings()\n"
          + "          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"no_retry_0_codes\"))\n"
          + "          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"no_retry_0_params\"));\n"
          + "      builder\n"
          + "          .blockSettings()\n"
          + "          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"no_retry_0_codes\"))\n"
          + "          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"no_retry_0_params\"));\n"
          + "      builder\n"
          + "          .waitOperationSettings()\n"
          + "          .setInitialCallSettings(\n"
          + "              UnaryCallSettings.<WaitRequest,"
          + " OperationSnapshot>newUnaryCallSettingsBuilder()\n"
          + "                 "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"no_retry_0_codes\"))\n"
          + "                 "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"no_retry_0_params\"))\n"
          + "                  .build())\n"
          + "          .setResponseTransformer(\n"
          + "             "
          + " ProtoOperationTransformers.ResponseTransformer.create(WaitResponse.class))\n"
          + "          .setMetadataTransformer(\n"
          + "             "
          + " ProtoOperationTransformers.MetadataTransformer.create(WaitMetadata.class))\n"
          + "          .setPollingAlgorithm(\n"
          + "              OperationTimedPollAlgorithm.create(\n"
          + "                  RetrySettings.newBuilder()\n"
          + "                      .setInitialRetryDelay(Duration.ofMillis(500L))\n"
          + "                      .setRetryDelayMultiplier(1.5)\n"
          + "                      .setMaxRetryDelay(Duration.ofMillis(5000L))\n"
          + "                      .setInitialRpcTimeout(Duration.ZERO)\n"
          + "                      .setRpcTimeoutMultiplier(1.0)\n"
          + "                      .setMaxRpcTimeout(Duration.ZERO)\n"
          + "                      .setTotalTimeout(Duration.ofMillis(300000L))\n"
          + "                      .build()));\n"
          + "      return builder;\n"
          + "    }\n"
          + "\n"
          + "    // NEXT_MAJOR_VER: remove 'throws Exception'.\n"
          + "    /**\n"
          + "     * Applies the given settings updater function to all of the unary API methods in"
          + " this service.\n"
          + "     *\n"
          + "     * <p>Note: This method does not support applying settings to streaming"
          + " methods.\n"
          + "     */\n"
          + "    public Builder applyToAllUnaryMethods(\n"
          + "        ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws"
          + " Exception {\n"
          + "      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);\n"
          + "      return this;\n"
          + "    }\n"
          + "\n"
          + "    public ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders() {\n"
          + "      return unaryMethodSettingsBuilders;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to echo. */\n"
          + "    public UnaryCallSettings.Builder<EchoRequest, EchoResponse> echoSettings() {\n"
          + "      return echoSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to expand. */\n"
          + "    public ServerStreamingCallSettings.Builder<ExpandRequest, EchoResponse>"
          + " expandSettings() {\n"
          + "      return expandSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to collect. */\n"
          + "    public StreamingCallSettings.Builder<EchoRequest, EchoResponse> collectSettings()"
          + " {\n"
          + "      return collectSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to chat. */\n"
          + "    public StreamingCallSettings.Builder<EchoRequest, EchoResponse> chatSettings()"
          + " {\n"
          + "      return chatSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to chatAgain. */\n"
          + "    public StreamingCallSettings.Builder<EchoRequest, EchoResponse>"
          + " chatAgainSettings() {\n"
          + "      return chatAgainSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to pagedExpand. */\n"
          + "    public PagedCallSettings.Builder<\n"
          + "            PagedExpandRequest, PagedExpandResponse, PagedExpandPagedResponse>\n"
          + "        pagedExpandSettings() {\n"
          + "      return pagedExpandSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to wait. */\n"
          + "    public UnaryCallSettings.Builder<WaitRequest, Operation> waitSettings() {\n"
          + "      return waitSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to wait. */\n"
          + "    @BetaApi(\n"
          + "        \"The surface for use by generated code is not stable yet and may change in"
          + " the future.\")\n"
          + "    public OperationCallSettings.Builder<WaitRequest, WaitResponse, WaitMetadata>\n"
          + "        waitOperationSettings() {\n"
          + "      return waitOperationSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to block. */\n"
          + "    public UnaryCallSettings.Builder<BlockRequest, BlockResponse> blockSettings() {\n"
          + "      return blockSettings;\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    public EchoStubSettings build() throws IOException {\n"
          + "      return new EchoStubSettings(this);\n"
          + "    }\n"
          + "  }\n"
          + "}\n";

  private static final String EXPECTED_LOGGING_STUB_SETTINGS_STRING =
      "package com.google.logging.v2.stub;\n"
          + "\n"
          + "import static"
          + " com.google.logging.v2.LoggingServiceV2Client.ListLogEntriesPagedResponse;\n"
          + "import static com.google.logging.v2.LoggingServiceV2Client.ListLogsPagedResponse;\n"
          + "import static"
          + " com.google.logging.v2.LoggingServiceV2Client.ListMonitoredResourceDescriptorsPagedResponse;\n"
          + "\n"
          + "import com.google.api.MonitoredResourceDescriptor;\n"
          + "import com.google.api.core.ApiFunction;\n"
          + "import com.google.api.core.ApiFuture;\n"
          + "import com.google.api.core.BetaApi;\n"
          + "import com.google.api.gax.batching.BatchingSettings;\n"
          + "import com.google.api.gax.batching.FlowControlSettings;\n"
          + "import com.google.api.gax.batching.FlowController;\n"
          + "import com.google.api.gax.batching.PartitionKey;\n"
          + "import com.google.api.gax.batching.RequestBuilder;\n"
          + "import com.google.api.gax.core.GaxProperties;\n"
          + "import com.google.api.gax.core.GoogleCredentialsProvider;\n"
          + "import com.google.api.gax.core.InstantiatingExecutorProvider;\n"
          + "import com.google.api.gax.grpc.GaxGrpcProperties;\n"
          + "import com.google.api.gax.grpc.GrpcTransportChannel;\n"
          + "import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n"
          + "import com.google.api.gax.retrying.RetrySettings;\n"
          + "import com.google.api.gax.rpc.ApiCallContext;\n"
          + "import com.google.api.gax.rpc.ApiClientHeaderProvider;\n"
          + "import com.google.api.gax.rpc.BatchedRequestIssuer;\n"
          + "import com.google.api.gax.rpc.BatchingCallSettings;\n"
          + "import com.google.api.gax.rpc.BatchingDescriptor;\n"
          + "import com.google.api.gax.rpc.ClientContext;\n"
          + "import com.google.api.gax.rpc.PageContext;\n"
          + "import com.google.api.gax.rpc.PagedCallSettings;\n"
          + "import com.google.api.gax.rpc.PagedListDescriptor;\n"
          + "import com.google.api.gax.rpc.PagedListResponseFactory;\n"
          + "import com.google.api.gax.rpc.StatusCode;\n"
          + "import com.google.api.gax.rpc.StubSettings;\n"
          + "import com.google.api.gax.rpc.TransportChannelProvider;\n"
          + "import com.google.api.gax.rpc.UnaryCallSettings;\n"
          + "import com.google.api.gax.rpc.UnaryCallable;\n"
          + "import com.google.common.collect.ImmutableList;\n"
          + "import com.google.common.collect.ImmutableMap;\n"
          + "import com.google.common.collect.ImmutableSet;\n"
          + "import com.google.common.collect.Lists;\n"
          + "import com.google.logging.v2.DeleteLogRequest;\n"
          + "import com.google.logging.v2.ListLogEntriesRequest;\n"
          + "import com.google.logging.v2.ListLogEntriesResponse;\n"
          + "import com.google.logging.v2.ListLogsRequest;\n"
          + "import com.google.logging.v2.ListLogsResponse;\n"
          + "import com.google.logging.v2.ListMonitoredResourceDescriptorsRequest;\n"
          + "import com.google.logging.v2.ListMonitoredResourceDescriptorsResponse;\n"
          + "import com.google.logging.v2.LogEntry;\n"
          + "import com.google.logging.v2.WriteLogEntriesRequest;\n"
          + "import com.google.logging.v2.WriteLogEntriesResponse;\n"
          + "import com.google.protobuf.Empty;\n"
          + "import java.io.IOException;\n"
          + "import java.util.Collection;\n"
          + "import java.util.List;\n"
          + "import java.util.Objects;\n"
          + "import javax.annotation.Generated;\n"
          + "import org.threeten.bp.Duration;\n"
          + "\n"
          + "// AUTO-GENERATED DOCUMENTATION AND CLASS.\n"
          + "/**\n"
          + " * Settings class to configure an instance of {@link LoggingServiceV2StubSettings}.\n"
          + " *\n"
          + " * <p>The default instance has everything set to sensible defaults:\n"
          + " *\n"
          + " * <ul>\n"
          + " *   <li>The default service address (logging.googleapis.com) and default port (443)"
          + " are used.\n"
          + " *   <li>Credentials are acquired automatically through Application Default"
          + " Credentials.\n"
          + " *   <li>Retries are configured for idempotent methods but not for non-idempotent"
          + " methods.\n"
          + " * </ul>\n"
          + " *\n"
          + " * <p>The builder of this class is recursive, so contained classes are themselves"
          + " builders. When\n"
          + " * build() is called, the tree of builders is called to create the complete settings"
          + " object.\n"
          + " *\n"
          + " * <p>For example, to set the total timeout of deleteLog to 30 seconds:\n"
          + " */\n"
          + "@BetaApi\n"
          + "@Generated(\"by gapic-generator-java\")\n"
          + "public class LoggingServiceV2StubSettings extends"
          + " StubSettings<LoggingServiceV2StubSettings> {\n"
          + "  /** The default scopes of the service. */\n"
          + "  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES =\n"
          + "      ImmutableList.<String>builder()\n"
          + "          .add(\"https://www.googleapis.com/auth/cloud-platform\")\n"
          + "          .add(\"https://www.googleapis.com/auth/cloud-platform.read-only\")\n"
          + "          .add(\"https://www.googleapis.com/auth/logging.admin\")\n"
          + "          .add(\"https://www.googleapis.com/auth/logging.read\")\n"
          + "          .add(\"https://www.googleapis.com/auth/logging.write\")\n"
          + "          .build();\n"
          + "\n"
          + "  private final UnaryCallSettings<DeleteLogRequest, Empty> deleteLogSettings;\n"
          + "  private final BatchingCallSettings<WriteLogEntriesRequest,"
          + " WriteLogEntriesResponse>\n"
          + "      writeLogEntriesSettings;\n"
          + "  private final PagedCallSettings<\n"
          + "          ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>\n"
          + "      listLogEntriesSettings;\n"
          + "  private final PagedCallSettings<\n"
          + "          ListMonitoredResourceDescriptorsRequest,\n"
          + "          ListMonitoredResourceDescriptorsResponse,\n"
          + "          ListMonitoredResourceDescriptorsPagedResponse>\n"
          + "      listMonitoredResourceDescriptorsSettings;\n"
          + "  private final PagedCallSettings<ListLogsRequest, ListLogsResponse,"
          + " ListLogsPagedResponse>\n"
          + "      listLogsSettings;\n"
          + "  private static final PagedListDescriptor<ListLogEntriesRequest,"
          + " ListLogEntriesResponse, LogEntry>\n"
          + "      LIST_LOG_ENTRIES_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<ListLogEntriesRequest, ListLogEntriesResponse,"
          + " LogEntry>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListLogEntriesRequest injectToken(ListLogEntriesRequest payload,"
          + " String token) {\n"
          + "              return"
          + " ListLogEntriesRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListLogEntriesRequest injectPageSize(\n"
          + "                ListLogEntriesRequest payload, int pageSize) {\n"
          + "              return"
          + " ListLogEntriesRequest.newBuilder(payload).setPageSize(pageSize).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListLogEntriesRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListLogEntriesResponse payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<LogEntry> extractResources(ListLogEntriesResponse"
          + " payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<LogEntry>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListDescriptor<\n"
          + "          ListMonitoredResourceDescriptorsRequest,\n"
          + "          ListMonitoredResourceDescriptorsResponse,\n"
          + "          MonitoredResourceDescriptor>\n"
          + "      LIST_MONITORED_RESOURCE_DESCRIPTORS_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<\n"
          + "              ListMonitoredResourceDescriptorsRequest,\n"
          + "              ListMonitoredResourceDescriptorsResponse,\n"
          + "              MonitoredResourceDescriptor>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListMonitoredResourceDescriptorsRequest injectToken(\n"
          + "                ListMonitoredResourceDescriptorsRequest payload, String token) {\n"
          + "              return ListMonitoredResourceDescriptorsRequest.newBuilder(payload)\n"
          + "                  .setPageToken(token)\n"
          + "                  .build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListMonitoredResourceDescriptorsRequest injectPageSize(\n"
          + "                ListMonitoredResourceDescriptorsRequest payload, int pageSize) {\n"
          + "              return ListMonitoredResourceDescriptorsRequest.newBuilder(payload)\n"
          + "                  .setPageSize(pageSize)\n"
          + "                  .build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListMonitoredResourceDescriptorsRequest"
          + " payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListMonitoredResourceDescriptorsResponse"
          + " payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<MonitoredResourceDescriptor> extractResources(\n"
          + "                ListMonitoredResourceDescriptorsResponse payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<MonitoredResourceDescriptor>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListDescriptor<ListLogsRequest, ListLogsResponse,"
          + " String>\n"
          + "      LIST_LOGS_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<ListLogsRequest, ListLogsResponse, String>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListLogsRequest injectToken(ListLogsRequest payload, String token)"
          + " {\n"
          + "              return"
          + " ListLogsRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListLogsRequest injectPageSize(ListLogsRequest payload, int"
          + " pageSize) {\n"
          + "              return"
          + " ListLogsRequest.newBuilder(payload).setPageSize(pageSize).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListLogsRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListLogsResponse payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<String> extractResources(ListLogsResponse payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<String>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>\n"
          + "      LIST_LOG_ENTRIES_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListLogEntriesPagedResponse> getFuturePagedResponse(\n"
          + "                UnaryCallable<ListLogEntriesRequest, ListLogEntriesResponse>"
          + " callable,\n"
          + "                ListLogEntriesRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListLogEntriesResponse> futureResponse) {\n"
          + "              PageContext<ListLogEntriesRequest, ListLogEntriesResponse, LogEntry>"
          + " pageContext =\n"
          + "                  PageContext.create(callable, LIST_LOG_ENTRIES_PAGE_STR_DESC,"
          + " request, context);\n"
          + "              return ListLogEntriesPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListMonitoredResourceDescriptorsRequest,\n"
          + "          ListMonitoredResourceDescriptorsResponse,\n"
          + "          ListMonitoredResourceDescriptorsPagedResponse>\n"
          + "      LIST_MONITORED_RESOURCE_DESCRIPTORS_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              ListMonitoredResourceDescriptorsRequest,\n"
          + "              ListMonitoredResourceDescriptorsResponse,\n"
          + "              ListMonitoredResourceDescriptorsPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListMonitoredResourceDescriptorsPagedResponse>"
          + " getFuturePagedResponse(\n"
          + "                UnaryCallable<\n"
          + "                        ListMonitoredResourceDescriptorsRequest,\n"
          + "                        ListMonitoredResourceDescriptorsResponse>\n"
          + "                    callable,\n"
          + "                ListMonitoredResourceDescriptorsRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListMonitoredResourceDescriptorsResponse> futureResponse)"
          + " {\n"
          + "              PageContext<\n"
          + "                      ListMonitoredResourceDescriptorsRequest,\n"
          + "                      ListMonitoredResourceDescriptorsResponse,\n"
          + "                      MonitoredResourceDescriptor>\n"
          + "                  pageContext =\n"
          + "                      PageContext.create(\n"
          + "                          callable,\n"
          + "                          LIST_MONITORED_RESOURCE_DESCRIPTORS_PAGE_STR_DESC,\n"
          + "                          request,\n"
          + "                          context);\n"
          + "              return ListMonitoredResourceDescriptorsPagedResponse.createAsync(\n"
          + "                  pageContext, futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListLogsRequest, ListLogsResponse, ListLogsPagedResponse>\n"
          + "      LIST_LOGS_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<ListLogsRequest, ListLogsResponse,"
          + " ListLogsPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListLogsPagedResponse> getFuturePagedResponse(\n"
          + "                UnaryCallable<ListLogsRequest, ListLogsResponse> callable,\n"
          + "                ListLogsRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListLogsResponse> futureResponse) {\n"
          + "              PageContext<ListLogsRequest, ListLogsResponse, String> pageContext =\n"
          + "                  PageContext.create(callable, LIST_LOGS_PAGE_STR_DESC, request,"
          + " context);\n"
          + "              return ListLogsPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final BatchingDescriptor<WriteLogEntriesRequest,"
          + " WriteLogEntriesResponse>\n"
          + "      WRITE_LOG_ENTRIES_BATCHING_DESC =\n"
          + "          new BatchingDescriptor<WriteLogEntriesRequest, WriteLogEntriesResponse>()"
          + " {\n"
          + "            @Override\n"
          + "            public PartitionKey getBatchPartitionKey(WriteLogEntriesRequest request)"
          + " {\n"
          + "              return new PartitionKey(\n"
          + "                  request.getLogName(), request.getResource(),"
          + " request.getLabels());\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public RequestBuilder<WriteLogEntriesRequest> getRequestBuilder() {\n"
          + "              return new RequestBuilder<WriteLogEntriesRequest>() {\n"
          + "                private RequestBuilder<WriteLogEntriesRequest> builder;\n"
          + "\n"
          + "                @Override\n"
          + "                public void appendRequest(WriteLogEntriesRequest request) {\n"
          + "                  if (Objects.isNull(builder)) {\n"
          + "                    builder = request.toBuilder();\n"
          + "                  } else {\n"
          + "                    builder.addAllEntries(request.getEntriesList());\n"
          + "                  }\n"
          + "                }\n"
          + "\n"
          + "                @Override\n"
          + "                public WriteLogEntriesRequest build() {\n"
          + "                  return builder.build();\n"
          + "                }\n"
          + "              };\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public void splitResponse(\n"
          + "                WriteLogEntriesResponse batchResponse,\n"
          + "                Collection<? extends BatchedRequestIssuer<WriteLogEntriesResponse>>"
          + " batch) {\n"
          + "              for (BatchedRequestIssuer<WriteLogEntriesResponse> responder : batch)"
          + " {\n"
          + "                WriteLogEntriesResponse response ="
          + " WriteLogEntriesResponse.newBuilder().build();\n"
          + "                responder.setResponse(response);\n"
          + "              }\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public void splitException(\n"
          + "                Throwable throwable,\n"
          + "                Collection<? extends BatchedRequestIssuer<WriteLogEntriesResponse>>"
          + " batch) {\n"
          + "              for (BatchedRequestIssuer<WriteLogEntriesResponse> responder : batch)"
          + " {\n"
          + "                responder.setException(throwable);\n"
          + "              }\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public long countElements(WriteLogEntriesRequest request) {\n"
          + "              return request.getEntriesCount();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public long countBytes(WriteLogEntriesRequest request) {\n"
          + "              return request.getSerializedSize();\n"
          + "            }\n"
          + "          };\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to deleteLog. */\n"
          + "  public UnaryCallSettings<DeleteLogRequest, Empty> deleteLogSettings() {\n"
          + "    return deleteLogSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to writeLogEntries. */\n"
          + "  public BatchingCallSettings<WriteLogEntriesRequest, WriteLogEntriesResponse>\n"
          + "      writeLogEntriesSettings() {\n"
          + "    return writeLogEntriesSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to listLogEntries. */\n"
          + "  public PagedCallSettings<\n"
          + "          ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>\n"
          + "      listLogEntriesSettings() {\n"
          + "    return listLogEntriesSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to"
          + " listMonitoredResourceDescriptors. */\n"
          + "  public PagedCallSettings<\n"
          + "          ListMonitoredResourceDescriptorsRequest,\n"
          + "          ListMonitoredResourceDescriptorsResponse,\n"
          + "          ListMonitoredResourceDescriptorsPagedResponse>\n"
          + "      listMonitoredResourceDescriptorsSettings() {\n"
          + "    return listMonitoredResourceDescriptorsSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to listLogs. */\n"
          + "  public PagedCallSettings<ListLogsRequest, ListLogsResponse,"
          + " ListLogsPagedResponse>\n"
          + "      listLogsSettings() {\n"
          + "    return listLogsSettings;\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  public LoggingServiceV2Stub createStub() throws IOException {\n"
          + "    if (getTransportChannelProvider()\n"
          + "        .getTransportName()\n"
          + "        .equals(GrpcTransportChannel.getGrpcTransportName())) {\n"
          + "      return GrpcLoggingServiceV2Stub.create(this);\n"
          + "    }\n"
          + "    throw new UnsupportedOperationException(\n"
          + "        String.format(\n"
          + "            \"Transport not supported: %s\","
          + " getTransportChannelProvider().getTransportName()));\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ExecutorProvider for this service. */\n"
          + "  public static InstantiatingExecutorProvider.Builder"
          + " defaultExecutorProviderBuilder() {\n"
          + "    return InstantiatingExecutorProvider.newBuilder();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service endpoint. */\n"
          + "  public static String getDefaultEndpoint() {\n"
          + "    return \"logging.googleapis.com:443\";\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service scopes. */\n"
          + "  public static List<String> getDefaultServiceScopes() {\n"
          + "    return DEFAULT_SERVICE_SCOPES;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default credentials for this service. */\n"
          + "  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder()"
          + " {\n"
          + "    return"
          + " GoogleCredentialsProvider.newBuilder().setScopesToApply(DEFAULT_SERVICE_SCOPES);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ChannelProvider for this service. */\n"
          + "  public static InstantiatingGrpcChannelProvider.Builder"
          + " defaultGrpcTransportProviderBuilder() {\n"
          + "    return InstantiatingGrpcChannelProvider.newBuilder()\n"
          + "        .setMaxInboundMessageSize(Integer.MAX_VALUE);\n"
          + "  }\n"
          + "\n"
          + "  public static TransportChannelProvider defaultTransportChannelProvider() {\n"
          + "    return defaultGrpcTransportProviderBuilder().build();\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"The surface for customizing headers is not stable yet and may change in"
          + " the future.\")\n"
          + "  public static ApiClientHeaderProvider.Builder"
          + " defaultApiClientHeaderProviderBuilder() {\n"
          + "    return ApiClientHeaderProvider.newBuilder()\n"
          + "        .setGeneratedLibToken(\n"
          + "            \"gapic\","
          + " GaxProperties.getLibraryVersion(LoggingServiceV2StubSettings.class))\n"
          + "        .setTransportToken(\n"
          + "            GaxGrpcProperties.getGrpcTokenName(),"
          + " GaxGrpcProperties.getGrpcVersion());\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder() {\n"
          + "    return Builder.createDefault();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder(ClientContext clientContext) {\n"
          + "    return new Builder(clientContext);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder containing all the values of this settings class. */\n"
          + "  public Builder toBuilder() {\n"
          + "    return new Builder(this);\n"
          + "  }\n"
          + "\n"
          + "  protected LoggingServiceV2StubSettings(Builder settingsBuilder) throws IOException"
          + " {\n"
          + "    super(settingsBuilder);\n"
          + "    deleteLogSettings = settingsBuilder.deleteLogSettings().build();\n"
          + "    writeLogEntriesSettings = settingsBuilder.writeLogEntriesSettings().build();\n"
          + "    listLogEntriesSettings = settingsBuilder.listLogEntriesSettings().build();\n"
          + "    listMonitoredResourceDescriptorsSettings =\n"
          + "        settingsBuilder.listMonitoredResourceDescriptorsSettings().build();\n"
          + "    listLogsSettings = settingsBuilder.listLogsSettings().build();\n"
          + "  }\n"
          + "\n"
          + "  /** Builder for LoggingServiceV2StubSettings. */\n"
          + "  public static class Builder extends StubSettings.Builder<LoggingServiceV2Stub,"
          + " Builder> {\n"
          + "    private final ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders;\n"
          + "    private final UnaryCallSettings.Builder<DeleteLogRequest, Empty>"
          + " deleteLogSettings;\n"
          + "    private final BatchingCallSettings.Builder<WriteLogEntriesRequest,"
          + " WriteLogEntriesResponse>\n"
          + "        writeLogEntriesSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>\n"
          + "        listLogEntriesSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListMonitoredResourceDescriptorsRequest,\n"
          + "            ListMonitoredResourceDescriptorsResponse,\n"
          + "            ListMonitoredResourceDescriptorsPagedResponse>\n"
          + "        listMonitoredResourceDescriptorsSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListLogsRequest, ListLogsResponse, ListLogsPagedResponse>\n"
          + "        listLogsSettings;\n"
          + "    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>>\n"
          + "        RETRYABLE_CODE_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions =\n"
          + "          ImmutableMap.builder();\n"
          + "      definitions.put(\n"
          + "          \"retry_policy_1_codes\",\n"
          + "          ImmutableSet.copyOf(\n"
          + "              Lists.<StatusCode.Code>newArrayList(\n"
          + "                  StatusCode.Code.DEADLINE_EXCEEDED,\n"
          + "                  StatusCode.Code.INTERNAL,\n"
          + "                  StatusCode.Code.UNAVAILABLE)));\n"
          + "      RETRYABLE_CODE_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    private static final ImmutableMap<String, RetrySettings>"
          + " RETRY_PARAM_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, RetrySettings> definitions ="
          + " ImmutableMap.builder();\n"
          + "      RetrySettings settings = null;\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRetryDelay(Duration.ofMillis(100L))\n"
          + "              .setRetryDelayMultiplier(1.3)\n"
          + "              .setMaxRetryDelay(Duration.ofMillis(60000L))\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(60000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"retry_policy_1_params\", settings);\n"
          + "      RETRY_PARAM_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    protected Builder() {\n"
          + "      this(((ClientContext) null));\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(ClientContext clientContext) {\n"
          + "      super(clientContext);\n"
          + "      deleteLogSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      writeLogEntriesSettings =\n"
          + "          BatchingCallSettings.newBuilder(WRITE_LOG_ENTRIES_BATCHING_DESC)\n"
          + "              .setBatchingSettings(BatchingSettings.newBuilder().build());\n"
          + "      listLogEntriesSettings ="
          + " PagedCallSettings.newBuilder(LIST_LOG_ENTRIES_PAGE_STR_FACT);\n"
          + "      listMonitoredResourceDescriptorsSettings =\n"
          + "         "
          + " PagedCallSettings.newBuilder(LIST_MONITORED_RESOURCE_DESCRIPTORS_PAGE_STR_FACT);\n"
          + "      listLogsSettings = PagedCallSettings.newBuilder(LIST_LOGS_PAGE_STR_FACT);\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              deleteLogSettings,\n"
          + "              writeLogEntriesSettings,\n"
          + "              listLogEntriesSettings,\n"
          + "              listMonitoredResourceDescriptorsSettings,\n"
          + "              listLogsSettings);\n"
          + "      initDefaults(this);\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(LoggingServiceV2StubSettings settings) {\n"
          + "      super(settings);\n"
          + "      deleteLogSettings = settings.deleteLogSettings.toBuilder();\n"
          + "      writeLogEntriesSettings = settings.writeLogEntriesSettings.toBuilder();\n"
          + "      listLogEntriesSettings = settings.listLogEntriesSettings.toBuilder();\n"
          + "      listMonitoredResourceDescriptorsSettings =\n"
          + "          settings.listMonitoredResourceDescriptorsSettings.toBuilder();\n"
          + "      listLogsSettings = settings.listLogsSettings.toBuilder();\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              deleteLogSettings,\n"
          + "              writeLogEntriesSettings,\n"
          + "              listLogEntriesSettings,\n"
          + "              listMonitoredResourceDescriptorsSettings,\n"
          + "              listLogsSettings);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder createDefault() {\n"
          + "      Builder builder = new Builder(((ClientContext) null));\n"
          + "      builder.setTransportChannelProvider(defaultTransportChannelProvider());\n"
          + "      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());\n"
          + "     "
          + " builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());\n"
          + "      builder.setEndpoint(getDefaultEndpoint());\n"
          + "      return initDefaults(builder);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder initDefaults(Builder builder) {\n"
          + "      builder\n"
          + "          .deleteLogSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .writeLogEntriesSettings()\n"
          + "          .setBatchingSettings(\n"
          + "              BatchingSettings.newBuilder()\n"
          + "                  .setElementCountThreshold(1000L)\n"
          + "                  .setRequestByteThreshold(1048576L)\n"
          + "                  .setDelayThreshold(Duration.ofMillis(50L))\n"
          + "                  .setFlowControlSettings(\n"
          + "                      FlowControlSettings.newBuilder()\n"
          + "                          .setMaxOutstandingElementCount(100000L)\n"
          + "                          .setMaxOutstandingRequestBytes(10485760L)\n"
          + "                          .setLimitExceededBehavior(\n"
          + "                              FlowController.LimitExceededBehavior.ThrowException)\n"
          + "                          .build())\n"
          + "                  .build());\n"
          + "      builder\n"
          + "          .writeLogEntriesSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .listLogEntriesSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .listMonitoredResourceDescriptorsSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .listLogsSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      return builder;\n"
          + "    }\n"
          + "\n"
          + "    // NEXT_MAJOR_VER: remove 'throws Exception'.\n"
          + "    /**\n"
          + "     * Applies the given settings updater function to all of the unary API methods in"
          + " this service.\n"
          + "     *\n"
          + "     * <p>Note: This method does not support applying settings to streaming"
          + " methods.\n"
          + "     */\n"
          + "    public Builder applyToAllUnaryMethods(\n"
          + "        ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws"
          + " Exception {\n"
          + "      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);\n"
          + "      return this;\n"
          + "    }\n"
          + "\n"
          + "    public ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders() {\n"
          + "      return unaryMethodSettingsBuilders;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to deleteLog. */\n"
          + "    public UnaryCallSettings.Builder<DeleteLogRequest, Empty> deleteLogSettings() {\n"
          + "      return deleteLogSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to writeLogEntries. */\n"
          + "    public BatchingCallSettings.Builder<WriteLogEntriesRequest,"
          + " WriteLogEntriesResponse>\n"
          + "        writeLogEntriesSettings() {\n"
          + "      return writeLogEntriesSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to listLogEntries. */\n"
          + "    public PagedCallSettings.Builder<\n"
          + "            ListLogEntriesRequest, ListLogEntriesResponse,"
          + " ListLogEntriesPagedResponse>\n"
          + "        listLogEntriesSettings() {\n"
          + "      return listLogEntriesSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to"
          + " listMonitoredResourceDescriptors. */\n"
          + "    public PagedCallSettings.Builder<\n"
          + "            ListMonitoredResourceDescriptorsRequest,\n"
          + "            ListMonitoredResourceDescriptorsResponse,\n"
          + "            ListMonitoredResourceDescriptorsPagedResponse>\n"
          + "        listMonitoredResourceDescriptorsSettings() {\n"
          + "      return listMonitoredResourceDescriptorsSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to listLogs. */\n"
          + "    public PagedCallSettings.Builder<ListLogsRequest, ListLogsResponse,"
          + " ListLogsPagedResponse>\n"
          + "        listLogsSettings() {\n"
          + "      return listLogsSettings;\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    public LoggingServiceV2StubSettings build() throws IOException {\n"
          + "      return new LoggingServiceV2StubSettings(this);\n"
          + "    }\n"
          + "  }\n"
          + "}\n";

  private static final String EXPECTED_PUBLISHER_STUB_SETTINGS_STRING =
      "package com.google.pubsub.v1.stub;\n"
          + "\n"
          + "import static com.google.pubsub.v1.PublisherClient.ListTopicSnapshotsPagedResponse;\n"
          + "import static"
          + " com.google.pubsub.v1.PublisherClient.ListTopicSubscriptionsPagedResponse;\n"
          + "import static com.google.pubsub.v1.PublisherClient.ListTopicsPagedResponse;\n"
          + "\n"
          + "import com.google.api.core.ApiFunction;\n"
          + "import com.google.api.core.ApiFuture;\n"
          + "import com.google.api.core.BetaApi;\n"
          + "import com.google.api.gax.batching.BatchingSettings;\n"
          + "import com.google.api.gax.batching.FlowControlSettings;\n"
          + "import com.google.api.gax.batching.FlowController;\n"
          + "import com.google.api.gax.batching.PartitionKey;\n"
          + "import com.google.api.gax.batching.RequestBuilder;\n"
          + "import com.google.api.gax.core.GaxProperties;\n"
          + "import com.google.api.gax.core.GoogleCredentialsProvider;\n"
          + "import com.google.api.gax.core.InstantiatingExecutorProvider;\n"
          + "import com.google.api.gax.grpc.GaxGrpcProperties;\n"
          + "import com.google.api.gax.grpc.GrpcTransportChannel;\n"
          + "import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n"
          + "import com.google.api.gax.retrying.RetrySettings;\n"
          + "import com.google.api.gax.rpc.ApiCallContext;\n"
          + "import com.google.api.gax.rpc.ApiClientHeaderProvider;\n"
          + "import com.google.api.gax.rpc.BatchedRequestIssuer;\n"
          + "import com.google.api.gax.rpc.BatchingCallSettings;\n"
          + "import com.google.api.gax.rpc.BatchingDescriptor;\n"
          + "import com.google.api.gax.rpc.ClientContext;\n"
          + "import com.google.api.gax.rpc.PageContext;\n"
          + "import com.google.api.gax.rpc.PagedCallSettings;\n"
          + "import com.google.api.gax.rpc.PagedListDescriptor;\n"
          + "import com.google.api.gax.rpc.PagedListResponseFactory;\n"
          + "import com.google.api.gax.rpc.StatusCode;\n"
          + "import com.google.api.gax.rpc.StubSettings;\n"
          + "import com.google.api.gax.rpc.TransportChannelProvider;\n"
          + "import com.google.api.gax.rpc.UnaryCallSettings;\n"
          + "import com.google.api.gax.rpc.UnaryCallable;\n"
          + "import com.google.common.collect.ImmutableList;\n"
          + "import com.google.common.collect.ImmutableMap;\n"
          + "import com.google.common.collect.ImmutableSet;\n"
          + "import com.google.common.collect.Lists;\n"
          + "import com.google.protobuf.Empty;\n"
          + "import com.google.pubsub.v1.DeleteTopicRequest;\n"
          + "import com.google.pubsub.v1.DetachSubscriptionRequest;\n"
          + "import com.google.pubsub.v1.DetachSubscriptionResponse;\n"
          + "import com.google.pubsub.v1.GetTopicRequest;\n"
          + "import com.google.pubsub.v1.ListTopicSnapshotsRequest;\n"
          + "import com.google.pubsub.v1.ListTopicSnapshotsResponse;\n"
          + "import com.google.pubsub.v1.ListTopicSubscriptionsRequest;\n"
          + "import com.google.pubsub.v1.ListTopicSubscriptionsResponse;\n"
          + "import com.google.pubsub.v1.ListTopicsRequest;\n"
          + "import com.google.pubsub.v1.ListTopicsResponse;\n"
          + "import com.google.pubsub.v1.PublishRequest;\n"
          + "import com.google.pubsub.v1.PublishResponse;\n"
          + "import com.google.pubsub.v1.Topic;\n"
          + "import com.google.pubsub.v1.UpdateTopicRequest;\n"
          + "import java.io.IOException;\n"
          + "import java.util.ArrayList;\n"
          + "import java.util.Collection;\n"
          + "import java.util.List;\n"
          + "import java.util.Objects;\n"
          + "import javax.annotation.Generated;\n"
          + "import org.threeten.bp.Duration;\n"
          + "\n"
          + "// AUTO-GENERATED DOCUMENTATION AND CLASS.\n"
          + "/**\n"
          + " * Settings class to configure an instance of {@link PublisherStubSettings}.\n"
          + " *\n"
          + " * <p>The default instance has everything set to sensible defaults:\n"
          + " *\n"
          + " * <ul>\n"
          + " *   <li>The default service address (pubsub.googleapis.com) and default port (443)"
          + " are used.\n"
          + " *   <li>Credentials are acquired automatically through Application Default"
          + " Credentials.\n"
          + " *   <li>Retries are configured for idempotent methods but not for non-idempotent"
          + " methods.\n"
          + " * </ul>\n"
          + " *\n"
          + " * <p>The builder of this class is recursive, so contained classes are themselves"
          + " builders. When\n"
          + " * build() is called, the tree of builders is called to create the complete settings"
          + " object.\n"
          + " *\n"
          + " * <p>For example, to set the total timeout of createTopic to 30 seconds:\n"
          + " */\n"
          + "@BetaApi\n"
          + "@Generated(\"by gapic-generator-java\")\n"
          + "public class PublisherStubSettings extends StubSettings<PublisherStubSettings> {\n"
          + "  /** The default scopes of the service. */\n"
          + "  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES =\n"
          + "      ImmutableList.<String>builder()\n"
          + "          .add(\"https://www.googleapis.com/auth/cloud-platform\")\n"
          + "          .add(\"https://www.googleapis.com/auth/pubsub\")\n"
          + "          .build();\n"
          + "\n"
          + "  private final UnaryCallSettings<Topic, Topic> createTopicSettings;\n"
          + "  private final UnaryCallSettings<UpdateTopicRequest, Topic> updateTopicSettings;\n"
          + "  private final BatchingCallSettings<PublishRequest, PublishResponse>"
          + " publishSettings;\n"
          + "  private final UnaryCallSettings<GetTopicRequest, Topic> getTopicSettings;\n"
          + "  private final PagedCallSettings<ListTopicsRequest, ListTopicsResponse,"
          + " ListTopicsPagedResponse>\n"
          + "      listTopicsSettings;\n"
          + "  private final PagedCallSettings<\n"
          + "          ListTopicSubscriptionsRequest,\n"
          + "          ListTopicSubscriptionsResponse,\n"
          + "          ListTopicSubscriptionsPagedResponse>\n"
          + "      listTopicSubscriptionsSettings;\n"
          + "  private final PagedCallSettings<\n"
          + "          ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " ListTopicSnapshotsPagedResponse>\n"
          + "      listTopicSnapshotsSettings;\n"
          + "  private final UnaryCallSettings<DeleteTopicRequest, Empty> deleteTopicSettings;\n"
          + "  private final UnaryCallSettings<DetachSubscriptionRequest,"
          + " DetachSubscriptionResponse>\n"
          + "      detachSubscriptionSettings;\n"
          + "  private static final PagedListDescriptor<ListTopicsRequest, ListTopicsResponse,"
          + " Topic>\n"
          + "      LIST_TOPICS_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<ListTopicsRequest, ListTopicsResponse, Topic>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicsRequest injectToken(ListTopicsRequest payload, String"
          + " token) {\n"
          + "              return"
          + " ListTopicsRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicsRequest injectPageSize(ListTopicsRequest payload, int"
          + " pageSize) {\n"
          + "              return"
          + " ListTopicsRequest.newBuilder(payload).setPageSize(pageSize).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListTopicsRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListTopicsResponse payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<Topic> extractResources(ListTopicsResponse payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<Topic>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListDescriptor<\n"
          + "          ListTopicSubscriptionsRequest, ListTopicSubscriptionsResponse, String>\n"
          + "      LIST_TOPIC_SUBSCRIPTIONS_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<\n"
          + "              ListTopicSubscriptionsRequest, ListTopicSubscriptionsResponse,"
          + " String>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicSubscriptionsRequest injectToken(\n"
          + "                ListTopicSubscriptionsRequest payload, String token) {\n"
          + "              return"
          + " ListTopicSubscriptionsRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicSubscriptionsRequest injectPageSize(\n"
          + "                ListTopicSubscriptionsRequest payload, int pageSize) {\n"
          + "              return ListTopicSubscriptionsRequest.newBuilder(payload)\n"
          + "                  .setPageSize(pageSize)\n"
          + "                  .build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListTopicSubscriptionsRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListTopicSubscriptionsResponse payload)"
          + " {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<String> extractResources(ListTopicSubscriptionsResponse"
          + " payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<String>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListDescriptor<\n"
          + "          ListTopicSnapshotsRequest, ListTopicSnapshotsResponse, String>\n"
          + "      LIST_TOPIC_SNAPSHOTS_PAGE_STR_DESC =\n"
          + "          new PagedListDescriptor<ListTopicSnapshotsRequest,"
          + " ListTopicSnapshotsResponse, String>() {\n"
          + "            @Override\n"
          + "            public String emptyToken() {\n"
          + "              return \"\";\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicSnapshotsRequest injectToken(\n"
          + "                ListTopicSnapshotsRequest payload, String token) {\n"
          + "              return"
          + " ListTopicSnapshotsRequest.newBuilder(payload).setPageToken(token).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public ListTopicSnapshotsRequest injectPageSize(\n"
          + "                ListTopicSnapshotsRequest payload, int pageSize) {\n"
          + "              return"
          + " ListTopicSnapshotsRequest.newBuilder(payload).setPageSize(pageSize).build();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Integer extractPageSize(ListTopicSnapshotsRequest payload) {\n"
          + "              return payload.getPageSize();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public String extractNextToken(ListTopicSnapshotsResponse payload) {\n"
          + "              return payload.getNextPageToken();\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public Iterable<String> extractResources(ListTopicSnapshotsResponse"
          + " payload) {\n"
          + "              return Objects.equals(payload.getResponsesList(), null)\n"
          + "                  ? ImmutableList.<String>of()\n"
          + "                  : payload.getResponsesList();\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListTopicsRequest, ListTopicsResponse, ListTopicsPagedResponse>\n"
          + "      LIST_TOPICS_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              ListTopicsRequest, ListTopicsResponse, ListTopicsPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListTopicsPagedResponse> getFuturePagedResponse(\n"
          + "                UnaryCallable<ListTopicsRequest, ListTopicsResponse> callable,\n"
          + "                ListTopicsRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListTopicsResponse> futureResponse) {\n"
          + "              PageContext<ListTopicsRequest, ListTopicsResponse, Topic> pageContext"
          + " =\n"
          + "                  PageContext.create(callable, LIST_TOPICS_PAGE_STR_DESC, request,"
          + " context);\n"
          + "              return ListTopicsPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListTopicSubscriptionsRequest,\n"
          + "          ListTopicSubscriptionsResponse,\n"
          + "          ListTopicSubscriptionsPagedResponse>\n"
          + "      LIST_TOPIC_SUBSCRIPTIONS_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              ListTopicSubscriptionsRequest,\n"
          + "              ListTopicSubscriptionsResponse,\n"
          + "              ListTopicSubscriptionsPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListTopicSubscriptionsPagedResponse>"
          + " getFuturePagedResponse(\n"
          + "                UnaryCallable<ListTopicSubscriptionsRequest,"
          + " ListTopicSubscriptionsResponse>\n"
          + "                    callable,\n"
          + "                ListTopicSubscriptionsRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListTopicSubscriptionsResponse> futureResponse) {\n"
          + "              PageContext<ListTopicSubscriptionsRequest,"
          + " ListTopicSubscriptionsResponse, String>\n"
          + "                  pageContext =\n"
          + "                      PageContext.create(\n"
          + "                          callable, LIST_TOPIC_SUBSCRIPTIONS_PAGE_STR_DESC, request,"
          + " context);\n"
          + "              return ListTopicSubscriptionsPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final PagedListResponseFactory<\n"
          + "          ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " ListTopicSnapshotsPagedResponse>\n"
          + "      LIST_TOPIC_SNAPSHOTS_PAGE_STR_FACT =\n"
          + "          new PagedListResponseFactory<\n"
          + "              ListTopicSnapshotsRequest,\n"
          + "              ListTopicSnapshotsResponse,\n"
          + "              ListTopicSnapshotsPagedResponse>() {\n"
          + "            @Override\n"
          + "            public ApiFuture<ListTopicSnapshotsPagedResponse>"
          + " getFuturePagedResponse(\n"
          + "                UnaryCallable<ListTopicSnapshotsRequest, ListTopicSnapshotsResponse>"
          + " callable,\n"
          + "                ListTopicSnapshotsRequest request,\n"
          + "                ApiCallContext context,\n"
          + "                ApiFuture<ListTopicSnapshotsResponse> futureResponse) {\n"
          + "              PageContext<ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " String>\n"
          + "                  pageContext =\n"
          + "                      PageContext.create(\n"
          + "                          callable, LIST_TOPIC_SNAPSHOTS_PAGE_STR_DESC, request,"
          + " context);\n"
          + "              return ListTopicSnapshotsPagedResponse.createAsync(pageContext,"
          + " futureResponse);\n"
          + "            }\n"
          + "          };\n"
          + "  private static final BatchingDescriptor<PublishRequest, PublishResponse>"
          + " PUBLISH_BATCHING_DESC =\n"
          + "      new BatchingDescriptor<PublishRequest, PublishResponse>() {\n"
          + "        @Override\n"
          + "        public PartitionKey getBatchPartitionKey(PublishRequest request) {\n"
          + "          return new PartitionKey(request.getTopic());\n"
          + "        }\n"
          + "\n"
          + "        @Override\n"
          + "        public RequestBuilder<PublishRequest> getRequestBuilder() {\n"
          + "          return new RequestBuilder<PublishRequest>() {\n"
          + "            private RequestBuilder<PublishRequest> builder;\n"
          + "\n"
          + "            @Override\n"
          + "            public void appendRequest(PublishRequest request) {\n"
          + "              if (Objects.isNull(builder)) {\n"
          + "                builder = request.toBuilder();\n"
          + "              } else {\n"
          + "                builder.addAllMessages(request.getMessagesList());\n"
          + "              }\n"
          + "            }\n"
          + "\n"
          + "            @Override\n"
          + "            public PublishRequest build() {\n"
          + "              return builder.build();\n"
          + "            }\n"
          + "          };\n"
          + "        }\n"
          + "\n"
          + "        @Override\n"
          + "        public void splitResponse(\n"
          + "            PublishResponse batchResponse,\n"
          + "            Collection<? extends BatchedRequestIssuer<PublishResponse>> batch) {\n"
          + "          int batchMessageIndex = 0;\n"
          + "          for (BatchedRequestIssuer<PublishResponse> responder : batch) {\n"
          + "            List<String> subresponseElements = new ArrayList<>();\n"
          + "            long subresponseCount = responder.getMessageCount();\n"
          + "            for (int i = 0; i < subresponseCount; i++) {\n"
          + "             "
          + " subresponseElements.add(batchResponse.getMessageIds(batchMessageIndex));\n"
          + "            }\n"
          + "            PublishResponse response =\n"
          + "               "
          + " PublishResponse.newBuilder().addAllMessageIds(subresponseElements).build();\n"
          + "            responder.setResponse(response);\n"
          + "          }\n"
          + "        }\n"
          + "\n"
          + "        @Override\n"
          + "        public void splitException(\n"
          + "            Throwable throwable,\n"
          + "            Collection<? extends BatchedRequestIssuer<PublishResponse>> batch) {\n"
          + "          for (BatchedRequestIssuer<PublishResponse> responder : batch) {\n"
          + "            responder.setException(throwable);\n"
          + "          }\n"
          + "        }\n"
          + "\n"
          + "        @Override\n"
          + "        public long countElements(PublishRequest request) {\n"
          + "          return request.getMessagesCount();\n"
          + "        }\n"
          + "\n"
          + "        @Override\n"
          + "        public long countBytes(PublishRequest request) {\n"
          + "          return request.getSerializedSize();\n"
          + "        }\n"
          + "      };\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to createTopic. */\n"
          + "  public UnaryCallSettings<Topic, Topic> createTopicSettings() {\n"
          + "    return createTopicSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to updateTopic. */\n"
          + "  public UnaryCallSettings<UpdateTopicRequest, Topic> updateTopicSettings() {\n"
          + "    return updateTopicSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to publish. */\n"
          + "  public BatchingCallSettings<PublishRequest, PublishResponse> publishSettings() {\n"
          + "    return publishSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to getTopic. */\n"
          + "  public UnaryCallSettings<GetTopicRequest, Topic> getTopicSettings() {\n"
          + "    return getTopicSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to listTopics. */\n"
          + "  public PagedCallSettings<ListTopicsRequest, ListTopicsResponse,"
          + " ListTopicsPagedResponse>\n"
          + "      listTopicsSettings() {\n"
          + "    return listTopicsSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to listTopicSubscriptions."
          + " */\n"
          + "  public PagedCallSettings<\n"
          + "          ListTopicSubscriptionsRequest,\n"
          + "          ListTopicSubscriptionsResponse,\n"
          + "          ListTopicSubscriptionsPagedResponse>\n"
          + "      listTopicSubscriptionsSettings() {\n"
          + "    return listTopicSubscriptionsSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to listTopicSnapshots. */\n"
          + "  public PagedCallSettings<\n"
          + "          ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " ListTopicSnapshotsPagedResponse>\n"
          + "      listTopicSnapshotsSettings() {\n"
          + "    return listTopicSnapshotsSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to deleteTopic. */\n"
          + "  public UnaryCallSettings<DeleteTopicRequest, Empty> deleteTopicSettings() {\n"
          + "    return deleteTopicSettings;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the object with the settings used for calls to detachSubscription. */\n"
          + "  public UnaryCallSettings<DetachSubscriptionRequest, DetachSubscriptionResponse>\n"
          + "      detachSubscriptionSettings() {\n"
          + "    return detachSubscriptionSettings;\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  public PublisherStub createStub() throws IOException {\n"
          + "    if (getTransportChannelProvider()\n"
          + "        .getTransportName()\n"
          + "        .equals(GrpcTransportChannel.getGrpcTransportName())) {\n"
          + "      return GrpcPublisherStub.create(this);\n"
          + "    }\n"
          + "    throw new UnsupportedOperationException(\n"
          + "        String.format(\n"
          + "            \"Transport not supported: %s\","
          + " getTransportChannelProvider().getTransportName()));\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ExecutorProvider for this service. */\n"
          + "  public static InstantiatingExecutorProvider.Builder"
          + " defaultExecutorProviderBuilder() {\n"
          + "    return InstantiatingExecutorProvider.newBuilder();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service endpoint. */\n"
          + "  public static String getDefaultEndpoint() {\n"
          + "    return \"pubsub.googleapis.com:443\";\n"
          + "  }\n"
          + "\n"
          + "  /** Returns the default service scopes. */\n"
          + "  public static List<String> getDefaultServiceScopes() {\n"
          + "    return DEFAULT_SERVICE_SCOPES;\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default credentials for this service. */\n"
          + "  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder()"
          + " {\n"
          + "    return"
          + " GoogleCredentialsProvider.newBuilder().setScopesToApply(DEFAULT_SERVICE_SCOPES);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder for the default ChannelProvider for this service. */\n"
          + "  public static InstantiatingGrpcChannelProvider.Builder"
          + " defaultGrpcTransportProviderBuilder() {\n"
          + "    return InstantiatingGrpcChannelProvider.newBuilder()\n"
          + "        .setMaxInboundMessageSize(Integer.MAX_VALUE);\n"
          + "  }\n"
          + "\n"
          + "  public static TransportChannelProvider defaultTransportChannelProvider() {\n"
          + "    return defaultGrpcTransportProviderBuilder().build();\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"The surface for customizing headers is not stable yet and may change in"
          + " the future.\")\n"
          + "  public static ApiClientHeaderProvider.Builder"
          + " defaultApiClientHeaderProviderBuilder() {\n"
          + "    return ApiClientHeaderProvider.newBuilder()\n"
          + "        .setGeneratedLibToken(\"gapic\","
          + " GaxProperties.getLibraryVersion(PublisherStubSettings.class))\n"
          + "        .setTransportToken(\n"
          + "            GaxGrpcProperties.getGrpcTokenName(),"
          + " GaxGrpcProperties.getGrpcVersion());\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder() {\n"
          + "    return Builder.createDefault();\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a new builder for this class. */\n"
          + "  public static Builder newBuilder(ClientContext clientContext) {\n"
          + "    return new Builder(clientContext);\n"
          + "  }\n"
          + "\n"
          + "  /** Returns a builder containing all the values of this settings class. */\n"
          + "  public Builder toBuilder() {\n"
          + "    return new Builder(this);\n"
          + "  }\n"
          + "\n"
          + "  protected PublisherStubSettings(Builder settingsBuilder) throws IOException {\n"
          + "    super(settingsBuilder);\n"
          + "    createTopicSettings = settingsBuilder.createTopicSettings().build();\n"
          + "    updateTopicSettings = settingsBuilder.updateTopicSettings().build();\n"
          + "    publishSettings = settingsBuilder.publishSettings().build();\n"
          + "    getTopicSettings = settingsBuilder.getTopicSettings().build();\n"
          + "    listTopicsSettings = settingsBuilder.listTopicsSettings().build();\n"
          + "    listTopicSubscriptionsSettings ="
          + " settingsBuilder.listTopicSubscriptionsSettings().build();\n"
          + "    listTopicSnapshotsSettings ="
          + " settingsBuilder.listTopicSnapshotsSettings().build();\n"
          + "    deleteTopicSettings = settingsBuilder.deleteTopicSettings().build();\n"
          + "    detachSubscriptionSettings ="
          + " settingsBuilder.detachSubscriptionSettings().build();\n"
          + "  }\n"
          + "\n"
          + "  /** Builder for PublisherStubSettings. */\n"
          + "  public static class Builder extends StubSettings.Builder<PublisherStub, Builder>"
          + " {\n"
          + "    private final ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders;\n"
          + "    private final UnaryCallSettings.Builder<Topic, Topic> createTopicSettings;\n"
          + "    private final UnaryCallSettings.Builder<UpdateTopicRequest, Topic>"
          + " updateTopicSettings;\n"
          + "    private final BatchingCallSettings.Builder<PublishRequest, PublishResponse>"
          + " publishSettings;\n"
          + "    private final UnaryCallSettings.Builder<GetTopicRequest, Topic>"
          + " getTopicSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListTopicsRequest, ListTopicsResponse, ListTopicsPagedResponse>\n"
          + "        listTopicsSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListTopicSubscriptionsRequest,\n"
          + "            ListTopicSubscriptionsResponse,\n"
          + "            ListTopicSubscriptionsPagedResponse>\n"
          + "        listTopicSubscriptionsSettings;\n"
          + "    private final PagedCallSettings.Builder<\n"
          + "            ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " ListTopicSnapshotsPagedResponse>\n"
          + "        listTopicSnapshotsSettings;\n"
          + "    private final UnaryCallSettings.Builder<DeleteTopicRequest, Empty>"
          + " deleteTopicSettings;\n"
          + "    private final UnaryCallSettings.Builder<DetachSubscriptionRequest,"
          + " DetachSubscriptionResponse>\n"
          + "        detachSubscriptionSettings;\n"
          + "    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>>\n"
          + "        RETRYABLE_CODE_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions =\n"
          + "          ImmutableMap.builder();\n"
          + "      definitions.put(\n"
          + "          \"retry_policy_0_codes\",\n"
          + "         "
          + " ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList(StatusCode.Code.UNAVAILABLE)));\n"
          + "      definitions.put(\n"
          + "          \"retry_policy_1_codes\",\n"
          + "          ImmutableSet.copyOf(\n"
          + "              Lists.<StatusCode.Code>newArrayList(\n"
          + "                  StatusCode.Code.ABORTED,\n"
          + "                  StatusCode.Code.CANCELLED,\n"
          + "                  StatusCode.Code.INTERNAL,\n"
          + "                  StatusCode.Code.RESOURCE_EXHAUSTED,\n"
          + "                  StatusCode.Code.UNKNOWN,\n"
          + "                  StatusCode.Code.UNAVAILABLE,\n"
          + "                  StatusCode.Code.DEADLINE_EXCEEDED)));\n"
          + "      definitions.put(\n"
          + "          \"retry_policy_2_codes\",\n"
          + "          ImmutableSet.copyOf(\n"
          + "              Lists.<StatusCode.Code>newArrayList(\n"
          + "                  StatusCode.Code.UNKNOWN, StatusCode.Code.ABORTED,"
          + " StatusCode.Code.UNAVAILABLE)));\n"
          + "      RETRYABLE_CODE_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    private static final ImmutableMap<String, RetrySettings>"
          + " RETRY_PARAM_DEFINITIONS;\n"
          + "\n"
          + "    static {\n"
          + "      ImmutableMap.Builder<String, RetrySettings> definitions ="
          + " ImmutableMap.builder();\n"
          + "      RetrySettings settings = null;\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRetryDelay(Duration.ofMillis(100L))\n"
          + "              .setRetryDelayMultiplier(1.3)\n"
          + "              .setMaxRetryDelay(Duration.ofMillis(60000L))\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(60000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"retry_policy_0_params\", settings);\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRetryDelay(Duration.ofMillis(100L))\n"
          + "              .setRetryDelayMultiplier(1.3)\n"
          + "              .setMaxRetryDelay(Duration.ofMillis(60000L))\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(60000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"retry_policy_1_params\", settings);\n"
          + "      settings =\n"
          + "          RetrySettings.newBuilder()\n"
          + "              .setInitialRetryDelay(Duration.ofMillis(100L))\n"
          + "              .setRetryDelayMultiplier(1.3)\n"
          + "              .setMaxRetryDelay(Duration.ofMillis(60000L))\n"
          + "              .setInitialRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setRpcTimeoutMultiplier(1.0)\n"
          + "              .setMaxRpcTimeout(Duration.ofMillis(60000L))\n"
          + "              .setTotalTimeout(Duration.ofMillis(60000L))\n"
          + "              .build();\n"
          + "      definitions.put(\"retry_policy_2_params\", settings);\n"
          + "      RETRY_PARAM_DEFINITIONS = definitions.build();\n"
          + "    }\n"
          + "\n"
          + "    protected Builder() {\n"
          + "      this(((ClientContext) null));\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(ClientContext clientContext) {\n"
          + "      super(clientContext);\n"
          + "      createTopicSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      updateTopicSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      publishSettings =\n"
          + "          BatchingCallSettings.newBuilder(PUBLISH_BATCHING_DESC)\n"
          + "              .setBatchingSettings(BatchingSettings.newBuilder().build());\n"
          + "      getTopicSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      listTopicsSettings = PagedCallSettings.newBuilder(LIST_TOPICS_PAGE_STR_FACT);\n"
          + "      listTopicSubscriptionsSettings =\n"
          + "          PagedCallSettings.newBuilder(LIST_TOPIC_SUBSCRIPTIONS_PAGE_STR_FACT);\n"
          + "      listTopicSnapshotsSettings ="
          + " PagedCallSettings.newBuilder(LIST_TOPIC_SNAPSHOTS_PAGE_STR_FACT);\n"
          + "      deleteTopicSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      detachSubscriptionSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              createTopicSettings,\n"
          + "              updateTopicSettings,\n"
          + "              publishSettings,\n"
          + "              getTopicSettings,\n"
          + "              listTopicsSettings,\n"
          + "              listTopicSubscriptionsSettings,\n"
          + "              listTopicSnapshotsSettings,\n"
          + "              deleteTopicSettings,\n"
          + "              detachSubscriptionSettings);\n"
          + "      initDefaults(this);\n"
          + "    }\n"
          + "\n"
          + "    protected Builder(PublisherStubSettings settings) {\n"
          + "      super(settings);\n"
          + "      createTopicSettings = settings.createTopicSettings.toBuilder();\n"
          + "      updateTopicSettings = settings.updateTopicSettings.toBuilder();\n"
          + "      publishSettings = settings.publishSettings.toBuilder();\n"
          + "      getTopicSettings = settings.getTopicSettings.toBuilder();\n"
          + "      listTopicsSettings = settings.listTopicsSettings.toBuilder();\n"
          + "      listTopicSubscriptionsSettings ="
          + " settings.listTopicSubscriptionsSettings.toBuilder();\n"
          + "      listTopicSnapshotsSettings = settings.listTopicSnapshotsSettings.toBuilder();\n"
          + "      deleteTopicSettings = settings.deleteTopicSettings.toBuilder();\n"
          + "      detachSubscriptionSettings = settings.detachSubscriptionSettings.toBuilder();\n"
          + "      unaryMethodSettingsBuilders =\n"
          + "          ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(\n"
          + "              createTopicSettings,\n"
          + "              updateTopicSettings,\n"
          + "              publishSettings,\n"
          + "              getTopicSettings,\n"
          + "              listTopicsSettings,\n"
          + "              listTopicSubscriptionsSettings,\n"
          + "              listTopicSnapshotsSettings,\n"
          + "              deleteTopicSettings,\n"
          + "              detachSubscriptionSettings);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder createDefault() {\n"
          + "      Builder builder = new Builder(((ClientContext) null));\n"
          + "      builder.setTransportChannelProvider(defaultTransportChannelProvider());\n"
          + "      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());\n"
          + "     "
          + " builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());\n"
          + "      builder.setEndpoint(getDefaultEndpoint());\n"
          + "      return initDefaults(builder);\n"
          + "    }\n"
          + "\n"
          + "    private static Builder initDefaults(Builder builder) {\n"
          + "      builder\n"
          + "          .createTopicSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_0_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_0_params\"));\n"
          + "      builder\n"
          + "          .updateTopicSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_0_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_0_params\"));\n"
          + "      builder\n"
          + "          .publishSettings()\n"
          + "          .setBatchingSettings(\n"
          + "              BatchingSettings.newBuilder()\n"
          + "                  .setElementCountThreshold(100L)\n"
          + "                  .setRequestByteThreshold(1048576L)\n"
          + "                  .setDelayThreshold(Duration.ofMillis(10L))\n"
          + "                  .setFlowControlSettings(\n"
          + "                      FlowControlSettings.newBuilder()\n"
          + "                         "
          + " .setLimitExceededBehavior(FlowController.LimitExceededBehavior.Ignore)\n"
          + "                          .build())\n"
          + "                  .build());\n"
          + "      builder\n"
          + "          .publishSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_1_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_1_params\"));\n"
          + "      builder\n"
          + "          .getTopicSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_2_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_2_params\"));\n"
          + "      builder\n"
          + "          .listTopicsSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_2_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_2_params\"));\n"
          + "      builder\n"
          + "          .listTopicSubscriptionsSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_2_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_2_params\"));\n"
          + "      builder\n"
          + "          .listTopicSnapshotsSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_2_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_2_params\"));\n"
          + "      builder\n"
          + "          .deleteTopicSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_0_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_0_params\"));\n"
          + "      builder\n"
          + "          .detachSubscriptionSettings()\n"
          + "         "
          + " .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(\"retry_policy_0_codes\"))\n"
          + "         "
          + " .setRetrySettings(RETRY_PARAM_DEFINITIONS.get(\"retry_policy_0_params\"));\n"
          + "      return builder;\n"
          + "    }\n"
          + "\n"
          + "    // NEXT_MAJOR_VER: remove 'throws Exception'.\n"
          + "    /**\n"
          + "     * Applies the given settings updater function to all of the unary API methods in"
          + " this service.\n"
          + "     *\n"
          + "     * <p>Note: This method does not support applying settings to streaming"
          + " methods.\n"
          + "     */\n"
          + "    public Builder applyToAllUnaryMethods(\n"
          + "        ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws"
          + " Exception {\n"
          + "      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);\n"
          + "      return this;\n"
          + "    }\n"
          + "\n"
          + "    public ImmutableList<UnaryCallSettings.Builder<?, ?>>"
          + " unaryMethodSettingsBuilders() {\n"
          + "      return unaryMethodSettingsBuilders;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to createTopic. */\n"
          + "    public UnaryCallSettings.Builder<Topic, Topic> createTopicSettings() {\n"
          + "      return createTopicSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to updateTopic. */\n"
          + "    public UnaryCallSettings.Builder<UpdateTopicRequest, Topic> updateTopicSettings()"
          + " {\n"
          + "      return updateTopicSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to publish. */\n"
          + "    public BatchingCallSettings.Builder<PublishRequest, PublishResponse>"
          + " publishSettings() {\n"
          + "      return publishSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to getTopic. */\n"
          + "    public UnaryCallSettings.Builder<GetTopicRequest, Topic> getTopicSettings() {\n"
          + "      return getTopicSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to listTopics. */\n"
          + "    public PagedCallSettings.Builder<ListTopicsRequest, ListTopicsResponse,"
          + " ListTopicsPagedResponse>\n"
          + "        listTopicsSettings() {\n"
          + "      return listTopicsSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to"
          + " listTopicSubscriptions. */\n"
          + "    public PagedCallSettings.Builder<\n"
          + "            ListTopicSubscriptionsRequest,\n"
          + "            ListTopicSubscriptionsResponse,\n"
          + "            ListTopicSubscriptionsPagedResponse>\n"
          + "        listTopicSubscriptionsSettings() {\n"
          + "      return listTopicSubscriptionsSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to listTopicSnapshots."
          + " */\n"
          + "    public PagedCallSettings.Builder<\n"
          + "            ListTopicSnapshotsRequest, ListTopicSnapshotsResponse,"
          + " ListTopicSnapshotsPagedResponse>\n"
          + "        listTopicSnapshotsSettings() {\n"
          + "      return listTopicSnapshotsSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to deleteTopic. */\n"
          + "    public UnaryCallSettings.Builder<DeleteTopicRequest, Empty> deleteTopicSettings()"
          + " {\n"
          + "      return deleteTopicSettings;\n"
          + "    }\n"
          + "\n"
          + "    /** Returns the builder for the settings used for calls to detachSubscription."
          + " */\n"
          + "    public UnaryCallSettings.Builder<DetachSubscriptionRequest,"
          + " DetachSubscriptionResponse>\n"
          + "        detachSubscriptionSettings() {\n"
          + "      return detachSubscriptionSettings;\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    public PublisherStubSettings build() throws IOException {\n"
          + "      return new PublisherStubSettings(this);\n"
          + "    }\n"
          + "  }\n"
          + "}\n";
}
