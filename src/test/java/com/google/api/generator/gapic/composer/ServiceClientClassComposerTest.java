// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.api.generator.gapic.composer;

import static junit.framework.Assert.assertEquals;

import com.google.api.generator.engine.writer.JavaWriterVisitor;
import com.google.api.generator.gapic.model.GapicClass;
import com.google.api.generator.gapic.model.Message;
import com.google.api.generator.gapic.model.ResourceName;
import com.google.api.generator.gapic.model.Service;
import com.google.api.generator.gapic.protoparser.Parser;
import com.google.protobuf.Descriptors.FileDescriptor;
import com.google.protobuf.Descriptors.ServiceDescriptor;
import com.google.showcase.v1beta1.EchoOuterClass;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.junit.Before;
import org.junit.Test;

public class ServiceClientClassComposerTest {
  private ServiceDescriptor echoService;
  private FileDescriptor echoFileDescriptor;

  @Before
  public void setUp() {
    echoFileDescriptor = EchoOuterClass.getDescriptor();
    echoService = echoFileDescriptor.getServices().get(0);
    assertEquals(echoService.getName(), "Echo");
  }

  @Test
  public void generateServiceClasses() {
    Map<String, Message> messageTypes = Parser.parseMessages(echoFileDescriptor);
    Map<String, ResourceName> resourceNames = Parser.parseResourceNames(echoFileDescriptor);
    Set<ResourceName> outputResourceNames = new HashSet<>();
    List<Service> services =
        Parser.parseService(echoFileDescriptor, messageTypes, resourceNames, outputResourceNames);

    Service echoProtoService = services.get(0);
    GapicClass clazz =
        ServiceClientClassComposer.instance().generate(echoProtoService, messageTypes);

    JavaWriterVisitor visitor = new JavaWriterVisitor();
    clazz.classDefinition().accept(visitor);
    assertEquals(EXPECTED_CLASS_STRING, visitor.write());
  }

  // TODO(miraleung): Update this when a file-diffing test mechanism is in place.
  private static final String EXPECTED_CLASS_STRING =
      "package com.google.showcase.v1beta1;\n"
          + "\n"
          + "import com.google.api.core.ApiFunction;\n"
          + "import com.google.api.core.ApiFuture;\n"
          + "import com.google.api.core.ApiFutures;\n"
          + "import com.google.api.core.BetaApi;\n"
          + "import com.google.api.gax.core.BackgroundResource;\n"
          + "import com.google.api.gax.longrunning.OperationFuture;\n"
          + "import com.google.api.gax.paging.AbstractFixedSizeCollection;\n"
          + "import com.google.api.gax.paging.AbstractPage;\n"
          + "import com.google.api.gax.paging.AbstractPagedListResponse;\n"
          + "import com.google.api.gax.rpc.BidiStreamingCallable;\n"
          + "import com.google.api.gax.rpc.ClientStreamingCallable;\n"
          + "import com.google.api.gax.rpc.OperationCallable;\n"
          + "import com.google.api.gax.rpc.PageContext;\n"
          + "import com.google.api.gax.rpc.ServerStreamingCallable;\n"
          + "import com.google.api.gax.rpc.UnaryCallable;\n"
          + "import com.google.api.resourcenames.ResourceName;\n"
          + "import com.google.common.util.concurrent.MoreExecutors;\n"
          + "import com.google.longrunning.Operation;\n"
          + "import com.google.longrunning.OperationsClient;\n"
          + "import com.google.rpc.Status;\n"
          + "import com.google.showcase.v1beta1.stub.EchoStub;\n"
          + "import com.google.showcase.v1beta1.stub.EchoStubSettings;\n"
          + "import java.io.IOException;\n"
          + "import java.util.List;\n"
          + "import java.util.Objects;\n"
          + "import java.util.concurrent.TimeUnit;\n"
          + "import javax.annotation.Generated;\n"
          + "\n"
          + "// AUTO-GENERATED DOCUMENTATION AND CLASS.\n"
          + "/**\n"
          + " * This class provides the ability to make remote calls to the backing service"
          + " through method calls\n"
          + " * that map to API methods. Sample code to get started:\n"
          + " *\n"
          + " * <p>Note: close() needs to be called on the echoClient object to clean up resources"
          + " such as\n"
          + " * threads. In the example above, try-with-resources is used, which automatically"
          + " calls close().\n"
          + " *\n"
          + " * <p>The surface of this class includes several types of Java methods for each of"
          + " the API's\n"
          + " * methods:\n"
          + " *\n"
          + " * <ol>\n"
          + " *   <li>A \"flattened\" method. With this type of method, the fields of the request"
          + " type have been\n"
          + " *       converted into function parameters. It may be the case that not all fields"
          + " are available as\n"
          + " *       parameters, and not every API method will have a flattened method entry"
          + " point.\n"
          + " *   <li>A \"request object\" method. This type of method only takes one parameter, a"
          + " request object,\n"
          + " *       which must be constructed before the call. Not every API method will have a"
          + " request object\n"
          + " *       method.\n"
          + " *   <li>A \"callable\" method. This type of method takes no parameters and returns"
          + " an immutable API\n"
          + " *       callable object, which can be used to initiate calls to the service.\n"
          + " * </ol>\n"
          + " *\n"
          + " * <p>See the individual methods for example code.\n"
          + " *\n"
          + " * <p>Many parameters require resource names to be formatted in a particular way. To"
          + " assist with\n"
          + " * these names, this class includes a format method for each type of name, and"
          + " additionally a parse\n"
          + " * method to extract the individual identifiers contained within names that are"
          + " returned.\n"
          + " *\n"
          + " * <p>This class can be customized by passing in a custom instance of EchoSettings to"
          + " create(). For\n"
          + " * example:\n"
          + " *\n"
          + " * <p>To customize credentials:\n"
          + " *\n"
          + " * <p>To customize the endpoint:\n"
          + " */\n"
          + "@BetaApi\n"
          + "@Generated(\"by gapic-generator\")\n"
          + "public class EchoClient implements BackgroundResource {\n"
          + "  private final EchoSettings settings;\n"
          + "  private final EchoStub stub;\n"
          + "  private final OperationsClient operationsClient;\n"
          + "\n"
          + "  /** Constructs an instance of EchoClient with default settings. */\n"
          + "  public static final EchoClient create() throws IOException {\n"
          + "    return create(EchoSettings.newBuilder().build());\n"
          + "  }\n"
          + "\n"
          + "  /**\n"
          + "   * Constructs an instance of EchoClient, using the given settings. The channels are"
          + " created based\n"
          + "   * on the settings passed in, or defaults for any settings that are not set.\n"
          + "   */\n"
          + "  public static final EchoClient create(EchoSettings settings) throws IOException {\n"
          + "    return new EchoClient(settings);\n"
          + "  }\n"
          + "\n"
          + "  /**\n"
          + "   * Constructs an instance of EchoClient, using the given stub for making calls."
          + " This is for\n"
          + "   * advanced usage - prefer using create(EchoSettings).\n"
          + "   */\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  public static final EchoClient create(EchoStub stub) {\n"
          + "    return new EchoClient(stub);\n"
          + "  }\n"
          + "\n"
          + "  /**\n"
          + "   * Constructs an instance of EchoClient, using the given settings. This is"
          + " protected so that it is\n"
          + "   * easy to make a subclass, but otherwise, the static factory methods should be"
          + " preferred.\n"
          + "   */\n"
          + "  protected EchoClient(EchoSettings settings) throws IOException {\n"
          + "    this.settings = settings;\n"
          + "    this.stub = ((EchoStubSettings) settings.getStubSettings()).createStub();\n"
          + "    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  protected EchoClient(EchoStub stub) {\n"
          + "    this.settings = null;\n"
          + "    this.stub = stub;\n"
          + "    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());\n"
          + "  }\n"
          + "\n"
          + "  public final EchoSettings getSettings() {\n"
          + "    return settings;\n"
          + "  }\n"
          + "\n"
          + "  @BetaApi(\"A restructuring of stub classes is planned, so this may break in the"
          + " future\")\n"
          + "  public EchoStub getStub() {\n"
          + "    return stub;\n"
          + "  }\n"
          + "\n"
          + "  /**\n"
          + "   * Returns the OperationsClient that can be used to query the status of a"
          + " long-running operation\n"
          + "   * returned by another API method call.\n"
          + "   */\n"
          + "  public final OperationsClient getOperationsClient() {\n"
          + "    return operationsClient;\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param parent\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(ResourceName parent) {\n"
          + "    EchoRequest request =\n"
          + "        EchoRequest.newBuilder()\n"
          + "            .setParent(Objects.isNull(parent) ? null : parent.toString())\n"
          + "            .build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param error\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(Status error) {\n"
          + "    EchoRequest request = EchoRequest.newBuilder().setError(error).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param name\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(FoobarName name) {\n"
          + "    EchoRequest request =\n"
          + "        EchoRequest.newBuilder().setName(Objects.isNull(name) ? null :"
          + " name.toString()).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param content\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(String content) {\n"
          + "    EchoRequest request = EchoRequest.newBuilder().setContent(content).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param name\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(String name) {\n"
          + "    EchoRequest request = EchoRequest.newBuilder().setName(name).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param parent\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(String parent) {\n"
          + "    EchoRequest request = EchoRequest.newBuilder().setParent(parent).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param content\n"
          + "   * @param severity\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(String content, Severity severity) {\n"
          + "    EchoRequest request =\n"
          + "        EchoRequest.newBuilder().setContent(content).setSeverity(severity).build();\n"
          + "    return echo(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param request The request object containing all of the parameters for the API"
          + " call.\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final EchoResponse echo(EchoRequest request) {\n"
          + "    return echoCallable().call(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final UnaryCallable<EchoRequest, EchoResponse> echoCallable() {\n"
          + "    return stub.echoCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final ServerStreamingCallable<ExpandRequest, EchoResponse> expandCallable()"
          + " {\n"
          + "    return stub.expandCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final ClientStreamingCallable<EchoRequest, EchoResponse> collectCallable()"
          + " {\n"
          + "    return stub.collectCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final BidiStreamingCallable<EchoRequest, EchoResponse> chatCallable() {\n"
          + "    return stub.chatCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final BidiStreamingCallable<EchoRequest, EchoResponse> chatAgainCallable()"
          + " {\n"
          + "    return stub.chatAgainCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param request The request object containing all of the parameters for the API"
          + " call.\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final PagedExpandPagedResponse pagedExpand(PagedExpandRequest request) {\n"
          + "    return pagedExpandPagedCallable().call(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final UnaryCallable<PagedExpandRequest, PagedExpandPagedResponse>\n"
          + "      pagedExpandPagedCallable() {\n"
          + "    return stub.pagedExpandPagedCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final UnaryCallable<PagedExpandRequest, PagedExpandResponse>"
          + " pagedExpandCallable() {\n"
          + "    return stub.pagedExpandCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param request The request object containing all of the parameters for the API"
          + " call.\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final OperationFuture<WaitResponse, WaitMetadata> waitAsync(WaitRequest"
          + " request) {\n"
          + "    return waitOperationCallable().futureCall(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final OperationCallable<WaitRequest, WaitResponse, WaitMetadata>"
          + " waitOperationCallable() {\n"
          + "    return stub.waitOperationCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final UnaryCallable<WaitRequest, Operation> waitCallable() {\n"
          + "    return stub.waitCallable();\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /**\n"
          + "   * Sample code:\n"
          + "   *\n"
          + "   * @param request The request object containing all of the parameters for the API"
          + " call.\n"
          + "   * @throws com.google.api.gax.rpc.ApiException if the remote call fails\n"
          + "   */\n"
          + "  public final BlockResponse block(BlockRequest request) {\n"
          + "    return blockCallable().call(request);\n"
          + "  }\n"
          + "\n"
          + "  // AUTO-GENERATED DOCUMENTATION AND METHOD.\n"
          + "  /** Sample code: */\n"
          + "  public final UnaryCallable<BlockRequest, BlockResponse> blockCallable() {\n"
          + "    return stub.blockCallable();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public final void close() {\n"
          + "    stub.close();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public void shutdown() {\n"
          + "    stub.shutdown();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public boolean isShutdown() {\n"
          + "    return stub.isShutdown();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public boolean isTerminated() {\n"
          + "    return stub.isTerminated();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public void shutdownNow() {\n"
          + "    stub.shutdownNow();\n"
          + "  }\n"
          + "\n"
          + "  @Override\n"
          + "  public boolean awaitTermination(long duration, TimeUnit unit) throws"
          + " InterruptedException {\n"
          + "    return stub.awaitTermination(duration, unit);\n"
          + "  }\n"
          + "\n"
          + "  public static class PagedExpandPagedResponse\n"
          + "      extends AbstractPagedListResponse<\n"
          + "          PagedExpandRequest,\n"
          + "          PagedExpandResponse,\n"
          + "          EchoResponse,\n"
          + "          PagedExpandPage,\n"
          + "          PagedExpandFixedSizeCollection> {\n"
          + "\n"
          + "    public static ApiFuture<PagedExpandPagedResponse> createAsync(\n"
          + "        PageContext<PagedExpandRequest, PagedExpandResponse, EchoResponse> context,\n"
          + "        ApiFuture<PagedExpandResponse> futureResponse) {\n"
          + "      ApiFuture<PagedExpandPage> futurePage =\n"
          + "          PagedExpandPage.createEmptyPage().createPageAsync(context,"
          + " futureResponse);\n"
          + "      return ApiFutures.transform(\n"
          + "          futurePage,\n"
          + "          new ApiFunction<PagedExpandPage, PagedExpandPagedResponse>() {\n"
          + "            @Override\n"
          + "            public PagedExpandPagedResponse apply(PagedExpandPage input) {\n"
          + "              return new PagedExpandPagedResponse(input);\n"
          + "            }\n"
          + "          },\n"
          + "          MoreExecutors.directExecutor());\n"
          + "    }\n"
          + "\n"
          + "    private PagedExpandPagedResponse(PagedExpandPage page) {\n"
          + "      super(page, PagedExpandFixedSizeCollection.createEmptyCollection());\n"
          + "    }\n"
          + "  }\n"
          + "\n"
          + "  public static class PagedExpandPage\n"
          + "      extends AbstractPage<PagedExpandRequest, PagedExpandResponse, EchoResponse,"
          + " PagedExpandPage> {\n"
          + "\n"
          + "    private PagedExpandPage(\n"
          + "        PageContext<PagedExpandRequest, PagedExpandResponse, EchoResponse> context,\n"
          + "        PagedExpandResponse response) {\n"
          + "      super(context, response);\n"
          + "    }\n"
          + "\n"
          + "    private static PagedExpandPage createEmptyPage() {\n"
          + "      return new PagedExpandPage(null, null);\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    protected PagedExpandPage createPage(\n"
          + "        PageContext<PagedExpandRequest, PagedExpandResponse, EchoResponse> context,\n"
          + "        PagedExpandResponse response) {\n"
          + "      return new PagedExpandPage(context, response);\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    public ApiFuture<PagedExpandPage> createPageAsync(\n"
          + "        PageContext<PagedExpandRequest, PagedExpandResponse, EchoResponse> context,\n"
          + "        ApiFuture<PagedExpandResponse> futureResponse) {\n"
          + "      return super.createPageAsync(context, futureResponse);\n"
          + "    }\n"
          + "  }\n"
          + "\n"
          + "  public static class PagedExpandFixedSizeCollection\n"
          + "      extends AbstractFixedSizeCollection<\n"
          + "          PagedExpandRequest,\n"
          + "          PagedExpandResponse,\n"
          + "          EchoResponse,\n"
          + "          PagedExpandPage,\n"
          + "          PagedExpandFixedSizeCollection> {\n"
          + "\n"
          + "    private PagedExpandFixedSizeCollection(List<PagedExpandPage> pages, int"
          + " collectionSize) {\n"
          + "      super(pages, collectionSize);\n"
          + "    }\n"
          + "\n"
          + "    private static PagedExpandFixedSizeCollection createEmptyCollection() {\n"
          + "      return new PagedExpandFixedSizeCollection(null, 0);\n"
          + "    }\n"
          + "\n"
          + "    @Override\n"
          + "    protected PagedExpandFixedSizeCollection createCollection(\n"
          + "        List<PagedExpandPage> pages, int collectionSize) {\n"
          + "      return new PagedExpandFixedSizeCollection(pages, collectionSize);\n"
          + "    }\n"
          + "  }\n"
          + "}\n";
}
